{
  "address": "0xfB7246C98B6e6C8529c06359B237566e5Bc4677C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVestedToken",
          "name": "_vestedToken",
          "type": "address"
        },
        {
          "internalType": "contract ISt1inch",
          "name": "st1inch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OriginInTheFuture",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "deregisterVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "registerVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestedToken",
      "outputs": [
        {
          "internalType": "contract IVestedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "vestedTokenTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "vestingsByReceiver",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x42d4f9cbb2eb7bb59148cce26018295983d713f473fc47f22d2817e5a336c724",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xfB7246C98B6e6C8529c06359B237566e5Bc4677C",
    "transactionIndex": 115,
    "gasUsed": "2048394",
    "logsBloom": "0x
    "blockHash": "0x391244c7b40c8d4f593640e2cc0964606775a31c45781ad20ceddda15ac658f2",
    "transactionHash": "0x42d4f9cbb2eb7bb59148cce26018295983d713f473fc47f22d2817e5a336c724",
    "logs": [
      {
        "transactionIndex": 115,
        "blockNumber": 16848245,
        "transactionHash": "0x42d4f9cbb2eb7bb59148cce26018295983d713f473fc47f22d2817e5a336c724",
        "address": "0xfB7246C98B6e6C8529c06359B237566e5Bc4677C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x391244c7b40c8d4f593640e2cc0964606775a31c45781ad20ceddda15ac658f2"
      }
    ],
    "blockNumber": 16848245,
    "cumulativeGasUsed": "8500587",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03d1B1A56708FA298198DD5e23651a29B76a16d2",
    "0x9A0C8Ff858d273f57072D714bca7411D717501D7"
  ],
  "numDeployments": 2,
  "solcInputHash": "94a7849a7db4b152980953f9f8b32d1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVestedToken\",\"name\":\"_vestedToken\",\"type\":\"address\"},{\"internalType\":\"contract ISt1inch\",\"name\":\"st1inch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OriginInTheFuture\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"deregisterVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"registerVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"contract IVestedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"vestedTokenTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"vestingsByReceiver\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestedVotingPower.sol\":\"VestedVotingPower\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/VestedVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IStepVesting.sol\\\";\\nimport \\\"./interfaces/ISt1inch.sol\\\";\\nimport \\\"./interfaces/IVestedToken.sol\\\";\\nimport \\\"./VotingPowerCalculator.sol\\\";\\n\\ncontract VestedVotingPower is Ownable, VotingPowerCalculator {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IVestedToken public immutable vestedToken;\\n    mapping (address => EnumerableSet.AddressSet) private _vestingsByReceiver;\\n\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n\\n    constructor(IVestedToken _vestedToken, ISt1inch st1inch) VotingPowerCalculator(st1inch.expBase(), st1inch.origin()) {\\n        vestedToken = _vestedToken;\\n    }\\n\\n    function vestedTokenTransferOwnership(address newOwner) external onlyOwner {\\n        vestedToken.transferOwnership(newOwner);\\n    }\\n\\n    function vestingsByReceiver(address receiver) external view returns (address[] memory) {\\n        return _vestingsByReceiver[receiver].values();\\n    }\\n\\n    function votingPowerOf(address account) external view returns (uint256 votingPower) {\\n        EnumerableSet.AddressSet storage vestings = _vestingsByReceiver[account];\\n        uint256 len = vestings.length();\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                IStepVesting vesting = IStepVesting(vestings.at(i));\\n                uint256 started = vesting.started();\\n                uint256 cliffDuration = vesting.cliffDuration();\\n                uint256 stepDuration = vesting.stepDuration();\\n                uint256 cliffAmount = vesting.cliffAmount();\\n                uint256 numOfSteps = vesting.numOfSteps();\\n                uint256 stepAmount = vesting.stepAmount();\\n                uint256 claimed = vesting.claimed();\\n                if (claimed < cliffAmount) {\\n                    votingPower += Math.min(cliffAmount, _votingPowerAt(_balanceAt(cliffAmount / _VOTING_POWER_DIVIDER, started + cliffDuration), block.timestamp));\\n                }\\n                for (uint256 j = 0; j < numOfSteps; j++) {\\n                    if (claimed < cliffAmount + stepAmount * (j + 1)) {\\n                        votingPower += Math.min(stepAmount, _votingPowerAt(_balanceAt(stepAmount / _VOTING_POWER_DIVIDER, started + cliffDuration + stepDuration * (j + 1)), block.timestamp));\\n                    }\\n                }\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function registerVestings(address[] calldata vestings) external onlyOwner {\\n        if (vestedToken.owner() == address(this)) {\\n            vestedToken.registerVestings(vestings);\\n        }\\n        uint256 len = vestings.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                address vesting = vestings[i];\\n                address receiver = IStepVesting(vesting).receiver();\\n                require(_vestingsByReceiver[receiver].add(vesting), \\\"Vesting is already registered\\\");\\n            }\\n        }\\n    }\\n\\n    function deregisterVestings(address[] calldata vestings) external onlyOwner {\\n        if (vestedToken.owner() == address(this)) {\\n            vestedToken.deregisterVestings(vestings);\\n        }\\n        uint256 len = vestings.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                address vesting = vestings[i];\\n                address receiver = IStepVesting(vesting).receiver();\\n                EnumerableSet.AddressSet storage receiverVestings = _vestingsByReceiver[receiver];\\n                require(receiverVestings.remove(vesting), \\\"Vesting is not registered\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x616c7a674f501c3e2c3c77d39159d330688efd362c9817d6d3398e261ee60a9b\",\"license\":\"MIT\"},\"contracts/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract VotingPowerCalculator {\\n    error OriginInTheFuture();\\n\\n    uint256 private constant _ONE_E18 = 1e18;\\n\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        if (origin_ > block.timestamp) revert OriginInTheFuture();\\n\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / _ONE_E18;\\n        _expTable2 = (_expTable1 * _expTable1) / _ONE_E18;\\n        _expTable3 = (_expTable2 * _expTable2) / _ONE_E18;\\n        _expTable4 = (_expTable3 * _expTable3) / _ONE_E18;\\n        _expTable5 = (_expTable4 * _expTable4) / _ONE_E18;\\n        _expTable6 = (_expTable5 * _expTable5) / _ONE_E18;\\n        _expTable7 = (_expTable6 * _expTable6) / _ONE_E18;\\n        _expTable8 = (_expTable7 * _expTable7) / _ONE_E18;\\n        _expTable9 = (_expTable8 * _expTable8) / _ONE_E18;\\n        _expTable10 = (_expTable9 * _expTable9) / _ONE_E18;\\n        _expTable11 = (_expTable10 * _expTable10) / _ONE_E18;\\n        _expTable12 = (_expTable11 * _expTable11) / _ONE_E18;\\n        _expTable13 = (_expTable12 * _expTable12) / _ONE_E18;\\n        _expTable14 = (_expTable13 * _expTable13) / _ONE_E18;\\n        _expTable15 = (_expTable14 * _expTable14) / _ONE_E18;\\n        _expTable16 = (_expTable15 * _expTable15) / _ONE_E18;\\n        _expTable17 = (_expTable16 * _expTable16) / _ONE_E18;\\n        _expTable18 = (_expTable17 * _expTable17) / _ONE_E18;\\n        _expTable19 = (_expTable18 * _expTable18) / _ONE_E18;\\n        _expTable20 = (_expTable19 * _expTable19) / _ONE_E18;\\n        _expTable21 = (_expTable20 * _expTable20) / _ONE_E18;\\n        _expTable22 = (_expTable21 * _expTable21) / _ONE_E18;\\n        _expTable23 = (_expTable22 * _expTable22) / _ONE_E18;\\n        _expTable24 = (_expTable23 * _expTable23) / _ONE_E18;\\n        _expTable25 = (_expTable24 * _expTable24) / _ONE_E18;\\n        _expTable26 = (_expTable25 * _expTable25) / _ONE_E18;\\n        _expTable27 = (_expTable26 * _expTable26) / _ONE_E18;\\n        _expTable28 = (_expTable27 * _expTable27) / _ONE_E18;\\n        _expTable29 = (_expTable28 * _expTable28) / _ONE_E18;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / _ONE_E18;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / _ONE_E18;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / _ONE_E18;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / _ONE_E18;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / _ONE_E18;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / _ONE_E18;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / _ONE_E18;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / _ONE_E18;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / _ONE_E18;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / _ONE_E18;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / _ONE_E18;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / _ONE_E18;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / _ONE_E18;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / _ONE_E18;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / _ONE_E18;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / _ONE_E18;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / _ONE_E18;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / _ONE_E18;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / _ONE_E18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / _ONE_E18;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / _ONE_E18;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / _ONE_E18;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / _ONE_E18;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / _ONE_E18;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / _ONE_E18;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / _ONE_E18;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / _ONE_E18;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / _ONE_E18;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / _ONE_E18;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / _ONE_E18;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x6070efb4305d8a7c6402b886fe6e6d2875f94ad19b695cdba611f8b7aae79b03\",\"license\":\"MIT\"},\"contracts/interfaces/ISt1inch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISt1inch {\\n    function expBase() external view returns (uint256);\\n    function origin() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5530e3d1de685f263c8be8b48c75a23392f4f6af13dc92bdae69b44eeb505104\",\"license\":\"MIT\"},\"contracts/interfaces/IStepVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IStepVesting {\\n    function receiver() external view returns (address);\\n    function claim() external;\\n    function started() external view returns (uint256);\\n    function cliffDuration() external view returns (uint256);\\n    function cliffAmount() external view returns (uint256);\\n    function stepDuration() external view returns (uint256);\\n    function stepAmount() external view returns (uint256);\\n    function numOfSteps() external view returns (uint256);\\n    function claimed() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca0140dc95b9c9e557bbc293397d5fff667c02db3787246ac1b427db3fd95c2b\",\"license\":\"MIT\"},\"contracts/interfaces/IVestedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ninterface IVestedToken {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function transferOwnership(address newOwner) external;\\n    function registerVestings(address[] calldata vestings) external;\\n    function deregisterVestings(address[] calldata vestings) external;\\n}\\n\",\"keccak256\":\"0x17b251044bff83eb36a439392d3098868d9fd2bd2627b724aab3b3ba422da8c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104a08060405234620005ee5760408162002a0d8038038091620000248285620005f3565b833981010312620005ee578051906001600160a01b03908183168303620005ee5760208091015191808316809303620005ee57604051632f2a70ff60e21b8152928284600481845afa938415620005ad57600094620005b9575b5082600491604051928380926349c5af9960e11b82525afa928315620005ad5760009362000573575b50506000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3428211620005645750670de0b6b3a76400006200030181620002f481620002e781620002da81620002cd81620002c081620002b3819f6200030e9f8362000299816200028c816200027f816200027281620002658162000258816200024b819f620002a69f836200023181620002248162000217816200020a81620001fd81620001f081620001e3819f6200023e9f83620001c981620001bc81620001af81620001a38199620001d6996080528060a0528060c052806200062d565b048060e052806200062d565b048061010052806200062d565b048061012052806200062d565b048061014052806200062d565b048061016052806200062d565b048061018052806200062d565b04806101a052806200062d565b04806101c052806200062d565b04806101e052806200062d565b048061020052806200062d565b048061022052806200062d565b048061024052806200062d565b048061026052806200062d565b048061028052806200062d565b04806102a052806200062d565b04806102c052806200062d565b04806102e052806200062d565b048061030052806200062d565b048061032052806200062d565b048061034052806200062d565b048061036052806200062d565b048061038052806200062d565b04806103a052806200062d565b04806103c052806200062d565b04806103e052806200062d565b048061040052806200062d565b048061042052806200062d565b048061044052806200062d565b0461046052610480526040516123b562000658823960805181818161094c0152818161137a0152611b06015260a051816108f3015260c051818181611ad6015261234d015260e051818181611aa10152612310015261010051818181611a6d01526122d4015261012051818181611a390152612298015261014051818181611a05015261225c0152610160518181816119d1015261222001526101805181818161199d01526121e401526101a05181818161196901526121a801526101c051818181611935015261216c01526101e05181818161190101526121300152610200518181816118cd01526120f401526102205181818161189901526120b8015261024051818181611865015261207c01526102605181818161183101526120400152610280518181816117fd015261200401526102a0518181816117c90152611fc801526102c0518181816117950152611f8c01526102e0518181816117610152611f5001526103005181818161172d0152611f140152610320518181816116f90152611ed80152610340518181816116c50152611e9c0152610360518181816116910152611e6001526103805181818161165d0152611e2401526103a0518181816116290152611de801526103c0518181816115f50152611dac01526103e0518181816115c10152611d7001526104005181818161158d0152611d340152610420518181816115590152611cf80152610440518181816115230152611cba0152610460518181816114ed0152611c7c0152610480518181816101fe01528181610b8301528181610bd60152610e1501526123b590f35b635a59719b60e01b8152600490fd5b8181949293943d8311620005a5575b6200058e8183620005f3565b81010312620005a2575051903880620000a7565b80fd5b503d62000582565b6040513d6000823e3d90fd5b90938382813d8311620005e6575b620005d38183620005f3565b81010312620005a257505192826200007e565b503d620005c7565b600080fd5b601f909101601f19168101906001600160401b038211908210176200061757604052565b634e487b7160e01b600052604160045260246000fd5b818102929181159184041417156200064157565b634e487b7160e01b600052601160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c80630c911b6e14610dbc5780634ca66f1a14610ba75780635de2974114610b38578063641e5d1f14610a5d578063715018a6146109c05780638da5cb5b1461096f578063938b5f3214610916578063bca9c3fc146108bd578063bcc3f3bd14610422578063d9165e19146101cf5763f2fde38b1461009657600080fd5b346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc576100cd610e92565b6100d5610f20565b73ffffffffffffffffffffffffffffffffffffffff80911690811561014857600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b80fd5b50346101cc576101de36610eb5565b6101e6610f20565b73ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169184604051937f8da5cb5b0000000000000000000000000000000000000000000000000000000085526020948581600481855afa9081156104175783916103fa575b5084163014610383575b505b818110610277578580f35b8261028b61028683858961112c565b61113c565b16604051907ff7260d3e0000000000000000000000000000000000000000000000000000000082528582600481845afa918215610378576102e09286918a9161034b575b50168852600186526040882061115d565b156102ed5760010161026c565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f56657374696e6720697320616c726561647920726567697374657265640000006044820152fd5b61036b9150883d8a11610371575b6103638183610fe2565b8101906110a3565b386102cf565b503d610359565b6040513d8a823e3d90fd5b803b156103f6578160405180927fd9165e190000000000000000000000000000000000000000000000000000000082528183816103c4898d600484016110cf565b03925af180156103eb571561026a576103dc90610f9f565b6103e757843861026a565b8480fd5b6040513d84823e3d90fd5b5080fd5b6104119150863d8811610371576103638183610fe2565b38610260565b6040513d85823e3d90fd5b50346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5761045a610e92565b73ffffffffffffffffffffffffffffffffffffffff1681526001602052604081208054908290815b83811061049457602085604051908152f35b73ffffffffffffffffffffffffffffffffffffffff6104b3828461105c565b90549060031b1c16604051907f1f2698ab000000000000000000000000000000000000000000000000000000008252602082600481845afa9182156108b257859261087e575b506040517fd85349f7000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610873578691610841575b506040517f4a4e5776000000000000000000000000000000000000000000000000000000008152602081600481865afa908115610836578791610804575b50604051937f460ad439000000000000000000000000000000000000000000000000000000008552602085600481875afa9485156103785788956107d0575b50604051947f5d1fbf54000000000000000000000000000000000000000000000000000000008652602086600481885afa9586156107c5578996610791575b50604051947f1989488b000000000000000000000000000000000000000000000000000000008652602086600481845afa95861561074f578a9661075a575b50906020600492604051938480927fe834a8340000000000000000000000000000000000000000000000000000000082525afa91821561074f578a92610716575b508082106106ea575b895b878110610695575050505050505050600101610482565b600181018702820183106106ac575b60010161067e565b9b6001906106cf6106c88f840188028988010160148b04611b03565b4290611377565b808910156106e4575087905b019c90506106a4565b906106db565b9a6106fd6106c884870160148f04611b03565b808d101561071057508b905b019a61067c565b90610709565b9091506020813d602011610747575b8161073260209383610fe2565b8101031261074257519038610673565b600080fd5b3d9150610725565b6040513d8c823e3d90fd5b919095506020823d602011610789575b8161077760209383610fe2565b81010312610742579051946020610632565b3d915061076a565b9095506020813d6020116107bd575b816107ad60209383610fe2565b81010312610742575194386105f3565b3d91506107a0565b6040513d8b823e3d90fd5b9094506020813d6020116107fc575b816107ec60209383610fe2565b81010312610742575193386105b4565b3d91506107df565b90506020813d60201161082e575b8161081f60209383610fe2565b81010312610742575138610575565b3d9150610812565b6040513d89823e3d90fd5b90506020813d60201161086b575b8161085c60209383610fe2565b81010312610742575138610537565b3d915061084f565b6040513d88823e3d90fd5b9091506020813d6020116108aa575b8161089a60209383610fe2565b81010312610742575190386104f9565b3d915061088d565b6040513d87823e3d90fd5b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc576109f7610f20565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101cc576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f6579073ffffffffffffffffffffffffffffffffffffffff9081610aae610e92565b168152600190818452604081209360405190818187549182815201908197855282852090855b818110610b255750505082610aea910383610fe2565b604051948186019282875251809352604086019693905b838210610b0e5786880387f35b845181168852968201969382019390850190610b01565b8254845292840192918701918701610ad4565b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101cc57610bb636610eb5565b610bbe610f20565b73ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169184604051937f8da5cb5b0000000000000000000000000000000000000000000000000000000085526020948581600481855afa908115610417578391610d9f575b5084163014610d3b575b505b818110610c4f578580f35b82610c5e61028683858961112c565b16604051907ff7260d3e0000000000000000000000000000000000000000000000000000000082528582600481845afa91821561037857610cb39286918a91610d1e575b50168852600186526040882061121e565b15610cc057600101610c44565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f56657374696e67206973206e6f742072656769737465726564000000000000006044820152fd5b610d359150883d8a11610371576103638183610fe2565b38610ca2565b803b156103f6578160405180927f4ca66f1a000000000000000000000000000000000000000000000000000000008252818381610d7c898d600484016110cf565b03925af180156103eb5715610c4257610d9490610f9f565b6103e7578438610c42565b610db69150863d8811610371576103638183610fe2565b38610c38565b50346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc57610df4610e92565b610dfc610f20565b8173ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692833b15610e8e576024908360405195869485937ff2fde38b0000000000000000000000000000000000000000000000000000000085521660048401525af180156103eb57610e82575080f35b610e8b90610f9f565b80f35b8280fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361074257565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126107425760043567ffffffffffffffff9283821161074257806023830112156107425781600401359384116107425760248460051b83010111610742576024019190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610f4157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610fb357604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610fb357604052565b811561102d570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b80548210156110745760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90816020910312610742575173ffffffffffffffffffffffffffffffffffffffff811681036107425790565b9091604060209282848201858352520192916000805b8382106110f457505050505090565b9091929394853573ffffffffffffffffffffffffffffffffffffffff8116809103610e8e5781528301948301939291600101906110e5565b91908110156110745760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036107425790565b9190600183016000908282528060205260408220541560001461121857845494680100000000000000008610156111eb57836111db6111a6886001604098999a0185558461105c565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b90600182019060009281845282602052604084205490811515600014611370577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182810181811161134357825490848201918211611316578082036112e1575b505050805480156112b457820191611297838361105c565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b6113016112f16111a6938661105c565b90549060031b1c9283928661105c565b9055865284602052604086205538808061127f565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b907f00000000000000000000000000000000000000000000000000000000000000009081811015611afe5750805b038160018216611ac8575b5060028116611a94575b60048116611a60575b60088116611a2c575b601081166119f8575b602081166119c4575b60408116611990575b6080811661195c575b6101008116611928575b61020081166118f4575b61040081166118c0575b610800811661188c575b6110008116611858575b6120008116611824575b61400081166117f0575b61800081166117bc575b620100008116611788575b620200008116611754575b620400008116611720575b6208000081166116ec575b6210000081166116b8575b622000008116611684575b624000008116611650575b62800000811661161c575b630100000081166115e8575b630200000081166115b4575b63040000008116611580575b6308000000811661154c575b63100000008116611511575b6320000000166114e15790565b670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490565b90670de0b6b3a76400006320000000917f000000000000000000000000000000000000000000000000000000000000000002049190506114d4565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114c8565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114bc565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114b0565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114a4565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611498565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061148d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611482565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611477565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061146c565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611461565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611456565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061144b565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611440565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611436565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061142c565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611422565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611418565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061140e565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611404565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113fa565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113f0565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113e7565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113de565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113d5565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113cc565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113c3565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113ba565b670de0b6b3a76400009192507f0000000000000000000000000000000000000000000000000000000000000000020490386113b0565b6113a5565b907f0000000000000000000000000000000000000000000000000000000000000000908181101561237a5750805b03816001821661233c575b5060028116612300575b600481166122c4575b60088116612288575b6010811661224c575b60208116612210575b604081166121d4575b60808116612198575b610100811661215c575b6102008116612120575b61040081166120e4575b61080081166120a8575b611000811661206c575b6120008116612030575b6140008116611ff4575b6180008116611fb8575b620100008116611f7c575b620200008116611f40575b620400008116611f04575b620800008116611ec8575b621000008116611e8c575b622000008116611e50575b624000008116611e14575b628000008116611dd8575b63010000008116611d9c575b63020000008116611d60575b63040000008116611d24575b63080000008116611ce8575b63100000008116611ca5575b632000000016611c6d5790565b611ca290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90565b90611ce0632000000091670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b919050611c60565b90611d1e90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c54565b90611d5a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c48565b90611d9690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c3c565b90611dd290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c30565b90611e0e90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c24565b90611e4a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c19565b90611e8690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c0e565b90611ec290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c03565b90611efe90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bf8565b90611f3a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bed565b90611f7690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611be2565b90611fb290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bd7565b90611fee90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bcc565b9061202a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bc2565b9061206690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bb8565b906120a290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bae565b906120de90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611ba4565b9061211a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b9a565b9061215690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b90565b9061219290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b86565b906121ce90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b7c565b9061220a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b73565b9061224690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b6a565b9061228290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b61565b906122be90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b58565b906122fa90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b4f565b9061233690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b46565b612373919250670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b9038611b3c565b611b3156fea2646970667358221220ce18381726c27deb371924a32f946f80c0608551a780c7ec08df3f9c0627dccd64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80630c911b6e14610dbc5780634ca66f1a14610ba75780635de2974114610b38578063641e5d1f14610a5d578063715018a6146109c05780638da5cb5b1461096f578063938b5f3214610916578063bca9c3fc146108bd578063bcc3f3bd14610422578063d9165e19146101cf5763f2fde38b1461009657600080fd5b346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc576100cd610e92565b6100d5610f20565b73ffffffffffffffffffffffffffffffffffffffff80911690811561014857600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b80fd5b50346101cc576101de36610eb5565b6101e6610f20565b73ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169184604051937f8da5cb5b0000000000000000000000000000000000000000000000000000000085526020948581600481855afa9081156104175783916103fa575b5084163014610383575b505b818110610277578580f35b8261028b61028683858961112c565b61113c565b16604051907ff7260d3e0000000000000000000000000000000000000000000000000000000082528582600481845afa918215610378576102e09286918a9161034b575b50168852600186526040882061115d565b156102ed5760010161026c565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f56657374696e6720697320616c726561647920726567697374657265640000006044820152fd5b61036b9150883d8a11610371575b6103638183610fe2565b8101906110a3565b386102cf565b503d610359565b6040513d8a823e3d90fd5b803b156103f6578160405180927fd9165e190000000000000000000000000000000000000000000000000000000082528183816103c4898d600484016110cf565b03925af180156103eb571561026a576103dc90610f9f565b6103e757843861026a565b8480fd5b6040513d84823e3d90fd5b5080fd5b6104119150863d8811610371576103638183610fe2565b38610260565b6040513d85823e3d90fd5b50346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5761045a610e92565b73ffffffffffffffffffffffffffffffffffffffff1681526001602052604081208054908290815b83811061049457602085604051908152f35b73ffffffffffffffffffffffffffffffffffffffff6104b3828461105c565b90549060031b1c16604051907f1f2698ab000000000000000000000000000000000000000000000000000000008252602082600481845afa9182156108b257859261087e575b506040517fd85349f7000000000000000000000000000000000000000000000000000000008152602081600481855afa908115610873578691610841575b506040517f4a4e5776000000000000000000000000000000000000000000000000000000008152602081600481865afa908115610836578791610804575b50604051937f460ad439000000000000000000000000000000000000000000000000000000008552602085600481875afa9485156103785788956107d0575b50604051947f5d1fbf54000000000000000000000000000000000000000000000000000000008652602086600481885afa9586156107c5578996610791575b50604051947f1989488b000000000000000000000000000000000000000000000000000000008652602086600481845afa95861561074f578a9661075a575b50906020600492604051938480927fe834a8340000000000000000000000000000000000000000000000000000000082525afa91821561074f578a92610716575b508082106106ea575b895b878110610695575050505050505050600101610482565b600181018702820183106106ac575b60010161067e565b9b6001906106cf6106c88f840188028988010160148b04611b03565b4290611377565b808910156106e4575087905b019c90506106a4565b906106db565b9a6106fd6106c884870160148f04611b03565b808d101561071057508b905b019a61067c565b90610709565b9091506020813d602011610747575b8161073260209383610fe2565b8101031261074257519038610673565b600080fd5b3d9150610725565b6040513d8c823e3d90fd5b919095506020823d602011610789575b8161077760209383610fe2565b81010312610742579051946020610632565b3d915061076a565b9095506020813d6020116107bd575b816107ad60209383610fe2565b81010312610742575194386105f3565b3d91506107a0565b6040513d8b823e3d90fd5b9094506020813d6020116107fc575b816107ec60209383610fe2565b81010312610742575193386105b4565b3d91506107df565b90506020813d60201161082e575b8161081f60209383610fe2565b81010312610742575138610575565b3d9150610812565b6040513d89823e3d90fd5b90506020813d60201161086b575b8161085c60209383610fe2565b81010312610742575138610537565b3d915061084f565b6040513d88823e3d90fd5b9091506020813d6020116108aa575b8161089a60209383610fe2565b81010312610742575190386104f9565b3d915061088d565b6040513d87823e3d90fd5b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc5773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc576109f7610f20565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101cc576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f6579073ffffffffffffffffffffffffffffffffffffffff9081610aae610e92565b168152600190818452604081209360405190818187549182815201908197855282852090855b818110610b255750505082610aea910383610fe2565b604051948186019282875251809352604086019693905b838210610b0e5786880387f35b845181168852968201969382019390850190610b01565b8254845292840192918701918701610ad4565b50346101cc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101cc57610bb636610eb5565b610bbe610f20565b73ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169184604051937f8da5cb5b0000000000000000000000000000000000000000000000000000000085526020948581600481855afa908115610417578391610d9f575b5084163014610d3b575b505b818110610c4f578580f35b82610c5e61028683858961112c565b16604051907ff7260d3e0000000000000000000000000000000000000000000000000000000082528582600481845afa91821561037857610cb39286918a91610d1e575b50168852600186526040882061121e565b15610cc057600101610c44565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601960248201527f56657374696e67206973206e6f742072656769737465726564000000000000006044820152fd5b610d359150883d8a11610371576103638183610fe2565b38610ca2565b803b156103f6578160405180927f4ca66f1a000000000000000000000000000000000000000000000000000000008252818381610d7c898d600484016110cf565b03925af180156103eb5715610c4257610d9490610f9f565b6103e7578438610c42565b610db69150863d8811610371576103638183610fe2565b38610c38565b50346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc57610df4610e92565b610dfc610f20565b8173ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692833b15610e8e576024908360405195869485937ff2fde38b0000000000000000000000000000000000000000000000000000000085521660048401525af180156103eb57610e82575080f35b610e8b90610f9f565b80f35b8280fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361074257565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126107425760043567ffffffffffffffff9283821161074257806023830112156107425781600401359384116107425760248460051b83010111610742576024019190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610f4157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610fb357604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610fb357604052565b811561102d570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b80548210156110745760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90816020910312610742575173ffffffffffffffffffffffffffffffffffffffff811681036107425790565b9091604060209282848201858352520192916000805b8382106110f457505050505090565b9091929394853573ffffffffffffffffffffffffffffffffffffffff8116809103610e8e5781528301948301939291600101906110e5565b91908110156110745760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036107425790565b9190600183016000908282528060205260408220541560001461121857845494680100000000000000008610156111eb57836111db6111a6886001604098999a0185558461105c565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b90600182019060009281845282602052604084205490811515600014611370577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182810181811161134357825490848201918211611316578082036112e1575b505050805480156112b457820191611297838361105c565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b6113016112f16111a6938661105c565b90549060031b1c9283928661105c565b9055865284602052604086205538808061127f565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b907f00000000000000000000000000000000000000000000000000000000000000009081811015611afe5750805b038160018216611ac8575b5060028116611a94575b60048116611a60575b60088116611a2c575b601081166119f8575b602081166119c4575b60408116611990575b6080811661195c575b6101008116611928575b61020081166118f4575b61040081166118c0575b610800811661188c575b6110008116611858575b6120008116611824575b61400081166117f0575b61800081166117bc575b620100008116611788575b620200008116611754575b620400008116611720575b6208000081166116ec575b6210000081166116b8575b622000008116611684575b624000008116611650575b62800000811661161c575b630100000081166115e8575b630200000081166115b4575b63040000008116611580575b6308000000811661154c575b63100000008116611511575b6320000000166114e15790565b670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490565b90670de0b6b3a76400006320000000917f000000000000000000000000000000000000000000000000000000000000000002049190506114d4565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114c8565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114bc565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114b0565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906114a4565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611498565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061148d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611482565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611477565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061146c565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611461565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611456565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061144b565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611440565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611436565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061142c565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611422565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611418565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061140e565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611404565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113fa565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113f0565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113e7565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113de565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113d5565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113cc565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113c3565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113ba565b670de0b6b3a76400009192507f0000000000000000000000000000000000000000000000000000000000000000020490386113b0565b6113a5565b907f0000000000000000000000000000000000000000000000000000000000000000908181101561237a5750805b03816001821661233c575b5060028116612300575b600481166122c4575b60088116612288575b6010811661224c575b60208116612210575b604081166121d4575b60808116612198575b610100811661215c575b6102008116612120575b61040081166120e4575b61080081166120a8575b611000811661206c575b6120008116612030575b6140008116611ff4575b6180008116611fb8575b620100008116611f7c575b620200008116611f40575b620400008116611f04575b620800008116611ec8575b621000008116611e8c575b622000008116611e50575b624000008116611e14575b628000008116611dd8575b63010000008116611d9c575b63020000008116611d60575b63040000008116611d24575b63080000008116611ce8575b63100000008116611ca5575b632000000016611c6d5790565b611ca290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90565b90611ce0632000000091670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b919050611c60565b90611d1e90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c54565b90611d5a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c48565b90611d9690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c3c565b90611dd290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c30565b90611e0e90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c24565b90611e4a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c19565b90611e8690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c0e565b90611ec290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611c03565b90611efe90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bf8565b90611f3a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bed565b90611f7690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611be2565b90611fb290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bd7565b90611fee90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bcc565b9061202a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bc2565b9061206690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bb8565b906120a290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611bae565b906120de90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611ba4565b9061211a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b9a565b9061215690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b90565b9061219290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b86565b906121ce90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b7c565b9061220a90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b73565b9061224690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b6a565b9061228290670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b61565b906122be90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b58565b906122fa90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b4f565b9061233690670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b90611b46565b612373919250670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102611023565b9038611b3c565b611b3156fea2646970667358221220ce18381726c27deb371924a32f946f80c0608551a780c7ec08df3f9c0627dccd64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2226,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_vestingsByReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AddressSet)1403_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)1403_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1403_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1403_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1402,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1088_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1088_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1083,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1087,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}