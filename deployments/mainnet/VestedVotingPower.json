{
  "address": "0xbA978b136A3f32e28747d0C1dF2bDdBb6eae02b3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVestedToken",
          "name": "_vestedToken",
          "type": "address"
        },
        {
          "internalType": "contract ISt1inch",
          "name": "st1inch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OriginInTheFuture",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "deregisterVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "registerVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestedToken",
      "outputs": [
        {
          "internalType": "contract IVestedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "vestedTokenTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe12c93d451ba8db3fc3aab5f2c793feab8bd70ddc06ec9b6e5932ae3710efef2",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xbA978b136A3f32e28747d0C1dF2bDdBb6eae02b3",
    "transactionIndex": 59,
    "gasUsed": "1968947",
    "logsBloom": "0x
    "blockHash": "0xa4f376c350242d6def8e11f189f42449fd4ab8c5fa5f35526a3fd5fb0e3777fc",
    "transactionHash": "0xe12c93d451ba8db3fc3aab5f2c793feab8bd70ddc06ec9b6e5932ae3710efef2",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 16825743,
        "transactionHash": "0xe12c93d451ba8db3fc3aab5f2c793feab8bd70ddc06ec9b6e5932ae3710efef2",
        "address": "0xbA978b136A3f32e28747d0C1dF2bDdBb6eae02b3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0xa4f376c350242d6def8e11f189f42449fd4ab8c5fa5f35526a3fd5fb0e3777fc"
      }
    ],
    "blockNumber": 16825743,
    "cumulativeGasUsed": "7034515",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03d1B1A56708FA298198DD5e23651a29B76a16d2",
    "0x9A0C8Ff858d273f57072D714bca7411D717501D7"
  ],
  "numDeployments": 1,
  "solcInputHash": "dbb94809eabbb785a2a3204d45ecb9c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVestedToken\",\"name\":\"_vestedToken\",\"type\":\"address\"},{\"internalType\":\"contract ISt1inch\",\"name\":\"st1inch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OriginInTheFuture\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"deregisterVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"registerVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"contract IVestedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"vestedTokenTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestedVotingPower.sol\":\"VestedVotingPower\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/VestedVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IStepVesting.sol\\\";\\nimport \\\"./interfaces/ISt1inch.sol\\\";\\nimport \\\"./interfaces/IVestedToken.sol\\\";\\nimport \\\"./VotingPowerCalculator.sol\\\";\\n\\ncontract VestedVotingPower is Ownable, VotingPowerCalculator {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IVestedToken public immutable vestedToken;\\n    mapping (address => EnumerableSet.AddressSet) private _vestingsByReceiver;\\n    EnumerableSet.AddressSet private _receivers;\\n    mapping(address => uint256) private _vestingBalances;\\n\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n\\n    constructor(IVestedToken _vestedToken, ISt1inch st1inch) VotingPowerCalculator(st1inch.expBase(), st1inch.origin()) {\\n        vestedToken = _vestedToken;\\n    }\\n\\n    function vestedTokenTransferOwnership(address newOwner) external onlyOwner {\\n        vestedToken.transferOwnership(newOwner);\\n    }\\n\\n    function votingPowerOf(address account) external view returns (uint256 votingPower) {\\n        EnumerableSet.AddressSet storage vestings = _vestingsByReceiver[account];\\n        uint256 len = vestings.length();\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                IStepVesting vesting = IStepVesting(vestings.at(i));\\n                uint256 started = vesting.started();\\n                uint256 cliffDuration = vesting.cliffDuration();\\n                uint256 stepDuration = vesting.stepDuration();\\n                if (block.timestamp < started + cliffDuration) {\\n                    votingPower += _votingPowerAt(_balanceAt(vesting.cliffAmount() / _VOTING_POWER_DIVIDER, started + cliffDuration), block.timestamp);\\n                }\\n                uint256 numOfSteps = vesting.numOfSteps();\\n                for (uint256 j = 0; j < numOfSteps; j++) {\\n                    uint256 stepUnlockTimestamp = started + cliffDuration + stepDuration * (j + 1);\\n                    if (block.timestamp < stepUnlockTimestamp) {\\n                        votingPower += _votingPowerAt(_balanceAt(vesting.stepAmount() / _VOTING_POWER_DIVIDER, stepUnlockTimestamp), block.timestamp);\\n                    }\\n                }\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function registerVestings(address[] calldata vestings) external onlyOwner {\\n        if (vestedToken.owner() == address(this)) {\\n            vestedToken.registerVestings(vestings);\\n        }\\n        uint256 len = vestings.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                address vesting = vestings[i];\\n                address receiver = IStepVesting(vesting).receiver();\\n                require(_vestingsByReceiver[receiver].add(vesting), \\\"Vesting is already registered\\\");\\n            }\\n        }\\n    }\\n\\n    function deregisterVestings(address[] calldata vestings) external onlyOwner {\\n        if (vestedToken.owner() == address(this)) {\\n            vestedToken.deregisterVestings(vestings);\\n        }\\n        uint256 len = vestings.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                address vesting = vestings[i];\\n                address receiver = IStepVesting(vesting).receiver();\\n                EnumerableSet.AddressSet storage receiverVestings = _vestingsByReceiver[receiver];\\n                require(receiverVestings.remove(vesting), \\\"Vesting is not registered\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf912a98ed395bc4efefa10fda27e0e7435c6a6349108ea5de2b88e1bfd97fbdf\",\"license\":\"MIT\"},\"contracts/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract VotingPowerCalculator {\\n    error OriginInTheFuture();\\n\\n    uint256 private constant _ONE_E18 = 1e18;\\n\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        if (origin_ > block.timestamp) revert OriginInTheFuture();\\n\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / _ONE_E18;\\n        _expTable2 = (_expTable1 * _expTable1) / _ONE_E18;\\n        _expTable3 = (_expTable2 * _expTable2) / _ONE_E18;\\n        _expTable4 = (_expTable3 * _expTable3) / _ONE_E18;\\n        _expTable5 = (_expTable4 * _expTable4) / _ONE_E18;\\n        _expTable6 = (_expTable5 * _expTable5) / _ONE_E18;\\n        _expTable7 = (_expTable6 * _expTable6) / _ONE_E18;\\n        _expTable8 = (_expTable7 * _expTable7) / _ONE_E18;\\n        _expTable9 = (_expTable8 * _expTable8) / _ONE_E18;\\n        _expTable10 = (_expTable9 * _expTable9) / _ONE_E18;\\n        _expTable11 = (_expTable10 * _expTable10) / _ONE_E18;\\n        _expTable12 = (_expTable11 * _expTable11) / _ONE_E18;\\n        _expTable13 = (_expTable12 * _expTable12) / _ONE_E18;\\n        _expTable14 = (_expTable13 * _expTable13) / _ONE_E18;\\n        _expTable15 = (_expTable14 * _expTable14) / _ONE_E18;\\n        _expTable16 = (_expTable15 * _expTable15) / _ONE_E18;\\n        _expTable17 = (_expTable16 * _expTable16) / _ONE_E18;\\n        _expTable18 = (_expTable17 * _expTable17) / _ONE_E18;\\n        _expTable19 = (_expTable18 * _expTable18) / _ONE_E18;\\n        _expTable20 = (_expTable19 * _expTable19) / _ONE_E18;\\n        _expTable21 = (_expTable20 * _expTable20) / _ONE_E18;\\n        _expTable22 = (_expTable21 * _expTable21) / _ONE_E18;\\n        _expTable23 = (_expTable22 * _expTable22) / _ONE_E18;\\n        _expTable24 = (_expTable23 * _expTable23) / _ONE_E18;\\n        _expTable25 = (_expTable24 * _expTable24) / _ONE_E18;\\n        _expTable26 = (_expTable25 * _expTable25) / _ONE_E18;\\n        _expTable27 = (_expTable26 * _expTable26) / _ONE_E18;\\n        _expTable28 = (_expTable27 * _expTable27) / _ONE_E18;\\n        _expTable29 = (_expTable28 * _expTable28) / _ONE_E18;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / _ONE_E18;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / _ONE_E18;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / _ONE_E18;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / _ONE_E18;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / _ONE_E18;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / _ONE_E18;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / _ONE_E18;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / _ONE_E18;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / _ONE_E18;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / _ONE_E18;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / _ONE_E18;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / _ONE_E18;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / _ONE_E18;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / _ONE_E18;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / _ONE_E18;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / _ONE_E18;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / _ONE_E18;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / _ONE_E18;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / _ONE_E18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / _ONE_E18;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / _ONE_E18;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / _ONE_E18;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / _ONE_E18;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / _ONE_E18;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / _ONE_E18;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / _ONE_E18;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / _ONE_E18;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / _ONE_E18;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / _ONE_E18;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / _ONE_E18;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x6070efb4305d8a7c6402b886fe6e6d2875f94ad19b695cdba611f8b7aae79b03\",\"license\":\"MIT\"},\"contracts/interfaces/ISt1inch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISt1inch {\\n    function expBase() external view returns (uint256);\\n    function origin() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5530e3d1de685f263c8be8b48c75a23392f4f6af13dc92bdae69b44eeb505104\",\"license\":\"MIT\"},\"contracts/interfaces/IStepVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IStepVesting {\\n    function receiver() external view returns (address);\\n    function claim() external;\\n    function started() external view returns (uint256);\\n    function cliffDuration() external view returns (uint256);\\n    function cliffAmount() external view returns (uint256);\\n    function stepDuration() external view returns (uint256);\\n    function stepAmount() external view returns (uint256);\\n    function numOfSteps() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x45bfaa2b63d2df21777c001e7fb1392d2f6a5817f9249cded62833a9ec91bf96\",\"license\":\"MIT\"},\"contracts/interfaces/IVestedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ninterface IVestedToken {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function transferOwnership(address newOwner) external;\\n    function registerVestings(address[] calldata vestings) external;\\n    function deregisterVestings(address[] calldata vestings) external;\\n}\\n\",\"keccak256\":\"0x17b251044bff83eb36a439392d3098868d9fd2bd2627b724aab3b3ba422da8c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104a08060405234620005ee576040816200289c8038038091620000248285620005f3565b833981010312620005ee578051906001600160a01b03908183168303620005ee5760208091015191808316809303620005ee57604051632f2a70ff60e21b8152928284600481845afa938415620005ad57600094620005b9575b5082600491604051928380926349c5af9960e11b82525afa928315620005ad5760009362000573575b50506000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3428211620005645750670de0b6b3a76400006200030181620002f481620002e781620002da81620002cd81620002c081620002b3819f6200030e9f8362000299816200028c816200027f816200027281620002658162000258816200024b819f620002a69f836200023181620002248162000217816200020a81620001fd81620001f081620001e3819f6200023e9f83620001c981620001bc81620001af81620001a38199620001d6996080528060a0528060c052806200062d565b048060e052806200062d565b048061010052806200062d565b048061012052806200062d565b048061014052806200062d565b048061016052806200062d565b048061018052806200062d565b04806101a052806200062d565b04806101c052806200062d565b04806101e052806200062d565b048061020052806200062d565b048061022052806200062d565b048061024052806200062d565b048061026052806200062d565b048061028052806200062d565b04806102a052806200062d565b04806102c052806200062d565b04806102e052806200062d565b048061030052806200062d565b048061032052806200062d565b048061034052806200062d565b048061036052806200062d565b048061038052806200062d565b04806103a052806200062d565b04806103c052806200062d565b04806103e052806200062d565b048061040052806200062d565b048061042052806200062d565b048061044052806200062d565b0461046052610480526040516122446200065882396080518181816108ab015281816112090152611995015260a05181610852015260c05181818161196501526121dc015260e051818181611930015261219f0152610100518181816118fc01526121630152610120518181816118c8015261212701526101405181818161189401526120eb01526101605181818161186001526120af01526101805181818161182c015261207301526101a0518181816117f8015261203701526101c0518181816117c40152611ffb01526101e0518181816117900152611fbf01526102005181818161175c0152611f830152610220518181816117280152611f470152610240518181816116f40152611f0b0152610260518181816116c00152611ecf01526102805181818161168c0152611e9301526102a0518181816116580152611e5701526102c0518181816116240152611e1b01526102e0518181816115f00152611ddf0152610300518181816115bc0152611da30152610320518181816115880152611d670152610340518181816115540152611d2b0152610360518181816115200152611cef0152610380518181816114ec0152611cb301526103a0518181816114b80152611c7701526103c0518181816114840152611c3b01526103e0518181816114500152611bff01526104005181818161141c0152611bc30152610420518181816113e80152611b870152610440518181816113b20152611b4901526104605181818161137c0152611b0b0152610480518181816101fc01528181610a0a01528181610a5f0152610c9b015261224490f35b635a59719b60e01b8152600490fd5b8181949293943d8311620005a5575b6200058e8183620005f3565b81010312620005a2575051903880620000a7565b80fd5b503d62000582565b6040513d6000823e3d90fd5b90938382813d8311620005e6575b620005d38183620005f3565b81010312620005a257505192826200007e565b503d620005c7565b600080fd5b601f909101601f19168101906001600160401b038211908210176200061757604052565b634e487b7160e01b600052604160045260246000fd5b818102929181159184041417156200064157565b634e487b7160e01b600052601160045260246000fdfe604060c081526004908136101561001557600080fd5b600091823560e01c80630c911b6e14610c405780634ca66f1a14610a2e5780635de29741146109bf578063715018a61461091f5780638da5cb5b146108ce578063938b5f3214610875578063bca9c3fc1461081c578063bcc3f3bd14610418578063d9165e19146101cb5763f2fde38b1461008f57600080fd5b346101c75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c7576100c6610d21565b906100cf610daf565b73ffffffffffffffffffffffffffffffffffffffff809216928315610144575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50346101c7576101da36610d44565b90926101e4610daf565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa90811561040e5783916103f1575b5084163014610379575b505b818110610273578780f35b8261028761028283858b610fbb565b610fcb565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561036f576102d9929186918c91610342575b50168a5260018752858a20610fec565b156102e657600101610268565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f56657374696e6720697320616c726561647920726567697374657265640000006044820152fd5b6103629150893d8b11610368575b61035a8183610e71565b810190610f32565b386102c9565b503d610350565b86513d8c823e3d90fd5b803b156103ed5781836103bc928a838b8a51968795869485937fd9165e190000000000000000000000000000000000000000000000000000000085528401610f5e565b03925af180156103e35715610266576103d490610e2e565b6103df578638610266565b8680fd5b85513d84823e3d90fd5b5080fd5b6104089150873d89116103685761035a8183610e71565b3861025c565b86513d85823e3d90fd5b50346101c757608060a052602060a0515260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75761045b610d21565b8373ffffffffffffffffffffffffffffffffffffffff8092168152600160a051515283812091825492825b84811061049957865188815260a0515190f35b826104a48284610eeb565b90549060031b1c1687517f1f2698ab00000000000000000000000000000000000000000000000000000000815260a05151818981855afa9081156108125786916107de575b508851907fd85349f700000000000000000000000000000000000000000000000000000000825260a05151828a81865afa9182156107d457879261079e575b508951917f4a4e577600000000000000000000000000000000000000000000000000000000835260a05151838b81875afa92831561079457889361075e575b5080820142106106ca575b8a51927f5d1fbf5400000000000000000000000000000000000000000000000000000000845260a05151848c81885afa9384156106c057899461068a575b50885b8481106105c857505050505050600101610486565b600181018202838501018042106105e3575b506001016105b3565b909d8d517f1989488b0000000000000000000000000000000000000000000000000000000081528d8160a0515191818b5afa90811561067f578c91610645575b5061063d906106386001946014429304611992565b611206565b019d906105da565b905060a051513d8111610678575b61065d8183610e71565b8160a05151918101031261067357516001610623565b600080fd5b503d610653565b508e513d8d823e3d90fd5b90935060a051513d81116106b9575b6106a38183610e71565b8160a051519181010312610673575192386105b0565b503d610699565b8c513d8b823e3d90fd5b9a8a517f460ad43900000000000000000000000000000000000000000000000000000000815260a05151818c81885afa9081156106c0578d908a92610726575b5061063861071f926014429387019104611992565b019a610572565b91505060a051513d8111610757575b61073f8183610e71565b8160a05151918101031261067357518c61063861070a565b503d610735565b90925060a051513d811161078d575b6107778183610e71565b8160a05151918101031261067357519138610567565b503d61076d565b8b513d8a823e3d90fd5b90915060a051513d81116107cd575b6107b78183610e71565b8160a05151918101031261067357519038610528565b503d6107ad565b8a513d89823e3d90fd5b905060a051513d811161080b575b6107f68183610e71565b8160a0515191810103126106735751386104e9565b503d6107ec565b89513d88823e3d90fd5b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346109bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109bc57610956610daf565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101c757610a3d36610d44565b9092610a47610daf565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa90811561040e578391610c23575b5084163014610bbd575b505b818110610ad6578780f35b82610ae561028283858b610fbb565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561036f57610b37929186918c91610ba0575b50168a5260018752858a206110ad565b15610b4457600101610acb565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601960248201527f56657374696e67206973206e6f742072656769737465726564000000000000006044820152fd5b610bb79150893d8b116103685761035a8183610e71565b38610b27565b803b156103ed578183610c00928a838b8a51968795869485937f4ca66f1a0000000000000000000000000000000000000000000000000000000085528401610f5e565b03925af180156103e35715610ac957610c1890610e2e565b6103df578638610ac9565b610c3a9150873d89116103685761035a8183610e71565b38610abf565b5090346101c75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75782610c7a610d21565b610c82610daf565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b15610d1d5783602492865197889586947ff2fde38b00000000000000000000000000000000000000000000000000000000865216908401525af1908115610d145750610d08575080f35b610d1190610e2e565b80f35b513d84823e3d90fd5b8380fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361067357565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126106735760043567ffffffffffffffff9283821161067357806023830112156106735781600401359384116106735760248460051b83010111610673576024019190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610dd057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610e4257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e4257604052565b8115610ebc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8054821015610f035760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90816020910312610673575173ffffffffffffffffffffffffffffffffffffffff811681036106735790565b9091604060209282848201858352520192916000805b838210610f8357505050505090565b9091929394853573ffffffffffffffffffffffffffffffffffffffff81168091036101c7578152830194830193929160010190610f74565b9190811015610f035760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036106735790565b919060018301600090828252806020526040822054156000146110a7578454946801000000000000000086101561107a578361106a611035886001604098999a01855584610eeb565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146111ff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff918281018181116111d2578254908482019182116111a557808203611170575b50505080548015611143578201916111268383610eeb565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b6111906111806110359386610eeb565b90549060031b1c92839286610eeb565b9055865284602052604086205538808061110e565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b907f0000000000000000000000000000000000000000000000000000000000000000908181101561198d5750805b038160018216611957575b5060028116611923575b600481166118ef575b600881166118bb575b60108116611887575b60208116611853575b6040811661181f575b608081166117eb575b61010081166117b7575b6102008116611783575b610400811661174f575b610800811661171b575b61100081166116e7575b61200081166116b3575b614000811661167f575b618000811661164b575b620100008116611617575b6202000081166115e3575b6204000081166115af575b62080000811661157b575b621000008116611547575b622000008116611513575b6240000081166114df575b6280000081166114ab575b63010000008116611477575b63020000008116611443575b6304000000811661140f575b630800000081166113db575b631000000081166113a0575b6320000000166113705790565b670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490565b90670de0b6b3a76400006320000000917f00000000000000000000000000000000000000000000000000000000000000000204919050611363565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611357565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061134b565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061133f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611333565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611327565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061131c565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611311565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611306565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112fb565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112f0565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112e5565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112da565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112cf565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112c5565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112bb565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112b1565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112a7565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061129d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611293565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611289565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061127f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611276565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061126d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611264565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061125b565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611252565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611249565b670de0b6b3a76400009192507f00000000000000000000000000000000000000000000000000000000000000000204903861123f565b611234565b907f000000000000000000000000000000000000000000000000000000000000000090818110156122095750805b0381600182166121cb575b506002811661218f575b60048116612153575b60088116612117575b601081166120db575b6020811661209f575b60408116612063575b60808116612027575b6101008116611feb575b6102008116611faf575b6104008116611f73575b6108008116611f37575b6110008116611efb575b6120008116611ebf575b6140008116611e83575b6180008116611e47575b620100008116611e0b575b620200008116611dcf575b620400008116611d93575b620800008116611d57575b621000008116611d1b575b622000008116611cdf575b624000008116611ca3575b628000008116611c67575b63010000008116611c2b575b63020000008116611bef575b63040000008116611bb3575b63080000008116611b77575b63100000008116611b34575b632000000016611afc5790565b611b3190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90565b90611b6f632000000091670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b919050611aef565b90611bad90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611ae3565b90611be990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611ad7565b90611c2590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611acb565b90611c6190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611abf565b90611c9d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611ab3565b90611cd990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611aa8565b90611d1590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a9d565b90611d5190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a92565b90611d8d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a87565b90611dc990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a7c565b90611e0590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a71565b90611e4190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a66565b90611e7d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a5b565b90611eb990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a51565b90611ef590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a47565b90611f3190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a3d565b90611f6d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a33565b90611fa990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a29565b90611fe590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a1f565b9061202190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a15565b9061205d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a0b565b9061209990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a02565b906120d590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119f9565b9061211190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119f0565b9061214d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119e7565b9061218990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119de565b906121c590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119d5565b612202919250670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90386119cb565b6119c056fea264697066735822122046f40c94c6937ef97807796382293044b46df01233095d8a3e626f78ee7ddf0264736f6c63430008130033",
  "deployedBytecode": "0x604060c081526004908136101561001557600080fd5b600091823560e01c80630c911b6e14610c405780634ca66f1a14610a2e5780635de29741146109bf578063715018a61461091f5780638da5cb5b146108ce578063938b5f3214610875578063bca9c3fc1461081c578063bcc3f3bd14610418578063d9165e19146101cb5763f2fde38b1461008f57600080fd5b346101c75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c7576100c6610d21565b906100cf610daf565b73ffffffffffffffffffffffffffffffffffffffff809216928315610144575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50346101c7576101da36610d44565b90926101e4610daf565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa90811561040e5783916103f1575b5084163014610379575b505b818110610273578780f35b8261028761028283858b610fbb565b610fcb565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561036f576102d9929186918c91610342575b50168a5260018752858a20610fec565b156102e657600101610268565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f56657374696e6720697320616c726561647920726567697374657265640000006044820152fd5b6103629150893d8b11610368575b61035a8183610e71565b810190610f32565b386102c9565b503d610350565b86513d8c823e3d90fd5b803b156103ed5781836103bc928a838b8a51968795869485937fd9165e190000000000000000000000000000000000000000000000000000000085528401610f5e565b03925af180156103e35715610266576103d490610e2e565b6103df578638610266565b8680fd5b85513d84823e3d90fd5b5080fd5b6104089150873d89116103685761035a8183610e71565b3861025c565b86513d85823e3d90fd5b50346101c757608060a052602060a0515260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75761045b610d21565b8373ffffffffffffffffffffffffffffffffffffffff8092168152600160a051515283812091825492825b84811061049957865188815260a0515190f35b826104a48284610eeb565b90549060031b1c1687517f1f2698ab00000000000000000000000000000000000000000000000000000000815260a05151818981855afa9081156108125786916107de575b508851907fd85349f700000000000000000000000000000000000000000000000000000000825260a05151828a81865afa9182156107d457879261079e575b508951917f4a4e577600000000000000000000000000000000000000000000000000000000835260a05151838b81875afa92831561079457889361075e575b5080820142106106ca575b8a51927f5d1fbf5400000000000000000000000000000000000000000000000000000000845260a05151848c81885afa9384156106c057899461068a575b50885b8481106105c857505050505050600101610486565b600181018202838501018042106105e3575b506001016105b3565b909d8d517f1989488b0000000000000000000000000000000000000000000000000000000081528d8160a0515191818b5afa90811561067f578c91610645575b5061063d906106386001946014429304611992565b611206565b019d906105da565b905060a051513d8111610678575b61065d8183610e71565b8160a05151918101031261067357516001610623565b600080fd5b503d610653565b508e513d8d823e3d90fd5b90935060a051513d81116106b9575b6106a38183610e71565b8160a051519181010312610673575192386105b0565b503d610699565b8c513d8b823e3d90fd5b9a8a517f460ad43900000000000000000000000000000000000000000000000000000000815260a05151818c81885afa9081156106c0578d908a92610726575b5061063861071f926014429387019104611992565b019a610572565b91505060a051513d8111610757575b61073f8183610e71565b8160a05151918101031261067357518c61063861070a565b503d610735565b90925060a051513d811161078d575b6107778183610e71565b8160a05151918101031261067357519138610567565b503d61076d565b8b513d8a823e3d90fd5b90915060a051513d81116107cd575b6107b78183610e71565b8160a05151918101031261067357519038610528565b503d6107ad565b8a513d89823e3d90fd5b905060a051513d811161080b575b6107f68183610e71565b8160a0515191810103126106735751386104e9565b503d6107ec565b89513d88823e3d90fd5b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346109bc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109bc57610956610daf565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346103ed57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103ed576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101c757610a3d36610d44565b9092610a47610daf565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa90811561040e578391610c23575b5084163014610bbd575b505b818110610ad6578780f35b82610ae561028283858b610fbb565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561036f57610b37929186918c91610ba0575b50168a5260018752858a206110ad565b15610b4457600101610acb565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601960248201527f56657374696e67206973206e6f742072656769737465726564000000000000006044820152fd5b610bb79150893d8b116103685761035a8183610e71565b38610b27565b803b156103ed578183610c00928a838b8a51968795869485937f4ca66f1a0000000000000000000000000000000000000000000000000000000085528401610f5e565b03925af180156103e35715610ac957610c1890610e2e565b6103df578638610ac9565b610c3a9150873d89116103685761035a8183610e71565b38610abf565b5090346101c75760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c75782610c7a610d21565b610c82610daf565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b15610d1d5783602492865197889586947ff2fde38b00000000000000000000000000000000000000000000000000000000865216908401525af1908115610d145750610d08575080f35b610d1190610e2e565b80f35b513d84823e3d90fd5b8380fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361067357565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126106735760043567ffffffffffffffff9283821161067357806023830112156106735781600401359384116106735760248460051b83010111610673576024019190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610dd057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610e4257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610e4257604052565b8115610ebc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8054821015610f035760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90816020910312610673575173ffffffffffffffffffffffffffffffffffffffff811681036106735790565b9091604060209282848201858352520192916000805b838210610f8357505050505090565b9091929394853573ffffffffffffffffffffffffffffffffffffffff81168091036101c7578152830194830193929160010190610f74565b9190811015610f035760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff811681036106735790565b919060018301600090828252806020526040822054156000146110a7578454946801000000000000000086101561107a578361106a611035886001604098999a01855584610eeb565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146111ff577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff918281018181116111d2578254908482019182116111a557808203611170575b50505080548015611143578201916111268383610eeb565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b6111906111806110359386610eeb565b90549060031b1c92839286610eeb565b9055865284602052604086205538808061110e565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b907f0000000000000000000000000000000000000000000000000000000000000000908181101561198d5750805b038160018216611957575b5060028116611923575b600481166118ef575b600881166118bb575b60108116611887575b60208116611853575b6040811661181f575b608081166117eb575b61010081166117b7575b6102008116611783575b610400811661174f575b610800811661171b575b61100081166116e7575b61200081166116b3575b614000811661167f575b618000811661164b575b620100008116611617575b6202000081166115e3575b6204000081166115af575b62080000811661157b575b621000008116611547575b622000008116611513575b6240000081166114df575b6280000081166114ab575b63010000008116611477575b63020000008116611443575b6304000000811661140f575b630800000081166113db575b631000000081166113a0575b6320000000166113705790565b670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490565b90670de0b6b3a76400006320000000917f00000000000000000000000000000000000000000000000000000000000000000204919050611363565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611357565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061134b565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061133f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611333565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611327565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061131c565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611311565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611306565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112fb565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112f0565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112e5565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112da565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112cf565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112c5565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112bb565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112b1565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906112a7565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061129d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611293565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611289565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061127f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611276565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061126d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611264565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061125b565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611252565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611249565b670de0b6b3a76400009192507f00000000000000000000000000000000000000000000000000000000000000000204903861123f565b611234565b907f000000000000000000000000000000000000000000000000000000000000000090818110156122095750805b0381600182166121cb575b506002811661218f575b60048116612153575b60088116612117575b601081166120db575b6020811661209f575b60408116612063575b60808116612027575b6101008116611feb575b6102008116611faf575b6104008116611f73575b6108008116611f37575b6110008116611efb575b6120008116611ebf575b6140008116611e83575b6180008116611e47575b620100008116611e0b575b620200008116611dcf575b620400008116611d93575b620800008116611d57575b621000008116611d1b575b622000008116611cdf575b624000008116611ca3575b628000008116611c67575b63010000008116611c2b575b63020000008116611bef575b63040000008116611bb3575b63080000008116611b77575b63100000008116611b34575b632000000016611afc5790565b611b3190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90565b90611b6f632000000091670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b919050611aef565b90611bad90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611ae3565b90611be990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611ad7565b90611c2590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611acb565b90611c6190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611abf565b90611c9d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611ab3565b90611cd990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611aa8565b90611d1590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a9d565b90611d5190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a92565b90611d8d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a87565b90611dc990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a7c565b90611e0590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a71565b90611e4190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a66565b90611e7d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a5b565b90611eb990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a51565b90611ef590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a47565b90611f3190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a3d565b90611f6d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a33565b90611fa990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a29565b90611fe590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a1f565b9061202190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a15565b9061205d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a0b565b9061209990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90611a02565b906120d590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119f9565b9061211190670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119f0565b9061214d90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119e7565b9061218990670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119de565b906121c590670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b906119d5565b612202919250670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610eb2565b90386119cb565b6119c056fea264697066735822122046f40c94c6937ef97807796382293044b46df01233095d8a3e626f78ee7ddf0264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 771,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_vestingsByReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AddressSet)460_storage)"
      },
      {
        "astId": 774,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_receivers",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)460_storage"
      },
      {
        "astId": 778,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_vestingBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)460_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)460_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)460_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 459,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)145_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)145_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 140,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 144,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}