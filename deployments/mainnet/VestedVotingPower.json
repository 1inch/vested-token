{
  "address": "0x19Bcba90D1160B99b8C11eb44F276505bFA041e3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVestedToken",
          "name": "_vestedToken",
          "type": "address"
        },
        {
          "internalType": "contract ISt1inch",
          "name": "st1inch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OriginInTheFuture",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "deregisterVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "registerVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestedToken",
      "outputs": [
        {
          "internalType": "contract IVestedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "vestedTokenTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "vestingsByReceiver",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votingPower",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f17a69d856fceb3db0ce047e99f34293dfc60c89e80be1c76878e7d36091be6",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x19Bcba90D1160B99b8C11eb44F276505bFA041e3",
    "transactionIndex": 47,
    "gasUsed": "2017813",
    "logsBloom": "0x
    "blockHash": "0xa895ffe2480438081fab3908e197d187e885e4fb4b99a9bff70cf1f01552a233",
    "transactionHash": "0x3f17a69d856fceb3db0ce047e99f34293dfc60c89e80be1c76878e7d36091be6",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 16826017,
        "transactionHash": "0x3f17a69d856fceb3db0ce047e99f34293dfc60c89e80be1c76878e7d36091be6",
        "address": "0x19Bcba90D1160B99b8C11eb44F276505bFA041e3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0xa895ffe2480438081fab3908e197d187e885e4fb4b99a9bff70cf1f01552a233"
      }
    ],
    "blockNumber": 16826017,
    "cumulativeGasUsed": "5573463",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x03d1B1A56708FA298198DD5e23651a29B76a16d2",
    "0x9A0C8Ff858d273f57072D714bca7411D717501D7"
  ],
  "numDeployments": 1,
  "solcInputHash": "d5c5d7900ad75de5368e350d26bf68b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVestedToken\",\"name\":\"_vestedToken\",\"type\":\"address\"},{\"internalType\":\"contract ISt1inch\",\"name\":\"st1inch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OriginInTheFuture\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"deregisterVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"registerVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestedToken\",\"outputs\":[{\"internalType\":\"contract IVestedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"vestedTokenTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"vestingsByReceiver\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestedVotingPower.sol\":\"VestedVotingPower\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/VestedVotingPower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IStepVesting.sol\\\";\\nimport \\\"./interfaces/ISt1inch.sol\\\";\\nimport \\\"./interfaces/IVestedToken.sol\\\";\\nimport \\\"./VotingPowerCalculator.sol\\\";\\n\\ncontract VestedVotingPower is Ownable, VotingPowerCalculator {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IVestedToken public immutable vestedToken;\\n    mapping (address => EnumerableSet.AddressSet) private _vestingsByReceiver;\\n\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n\\n    constructor(IVestedToken _vestedToken, ISt1inch st1inch) VotingPowerCalculator(st1inch.expBase(), st1inch.origin()) {\\n        vestedToken = _vestedToken;\\n    }\\n\\n    function vestedTokenTransferOwnership(address newOwner) external onlyOwner {\\n        vestedToken.transferOwnership(newOwner);\\n    }\\n\\n    function vestingsByReceiver(address receiver) external view returns (address[] memory) {\\n        return _vestingsByReceiver[receiver].values();\\n    }\\n\\n    function votingPowerOf(address account) external view returns (uint256 votingPower) {\\n        EnumerableSet.AddressSet storage vestings = _vestingsByReceiver[account];\\n        uint256 len = vestings.length();\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                IStepVesting vesting = IStepVesting(vestings.at(i));\\n                uint256 started = vesting.started();\\n                uint256 cliffDuration = vesting.cliffDuration();\\n                uint256 stepDuration = vesting.stepDuration();\\n                if (block.timestamp < started + cliffDuration) {\\n                    votingPower += _votingPowerAt(_balanceAt(vesting.cliffAmount() / _VOTING_POWER_DIVIDER, started + cliffDuration), block.timestamp);\\n                }\\n                uint256 numOfSteps = vesting.numOfSteps();\\n                for (uint256 j = 0; j < numOfSteps; j++) {\\n                    uint256 stepUnlockTimestamp = started + cliffDuration + stepDuration * (j + 1);\\n                    if (block.timestamp < stepUnlockTimestamp) {\\n                        votingPower += _votingPowerAt(_balanceAt(vesting.stepAmount() / _VOTING_POWER_DIVIDER, stepUnlockTimestamp), block.timestamp);\\n                    }\\n                }\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function registerVestings(address[] calldata vestings) external onlyOwner {\\n        if (vestedToken.owner() == address(this)) {\\n            vestedToken.registerVestings(vestings);\\n        }\\n        uint256 len = vestings.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                address vesting = vestings[i];\\n                address receiver = IStepVesting(vesting).receiver();\\n                require(_vestingsByReceiver[receiver].add(vesting), \\\"Vesting is already registered\\\");\\n            }\\n        }\\n    }\\n\\n    function deregisterVestings(address[] calldata vestings) external onlyOwner {\\n        if (vestedToken.owner() == address(this)) {\\n            vestedToken.deregisterVestings(vestings);\\n        }\\n        uint256 len = vestings.length;\\n        unchecked {\\n            for (uint256 i = 0; i < len; i++) {\\n                address vesting = vestings[i];\\n                address receiver = IStepVesting(vesting).receiver();\\n                EnumerableSet.AddressSet storage receiverVestings = _vestingsByReceiver[receiver];\\n                require(receiverVestings.remove(vesting), \\\"Vesting is not registered\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa43632ddb7e636b15306e801c9f8de52371044072f22a330b4c2db1cdeab5714\",\"license\":\"MIT\"},\"contracts/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ncontract VotingPowerCalculator {\\n    error OriginInTheFuture();\\n\\n    uint256 private constant _ONE_E18 = 1e18;\\n\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        if (origin_ > block.timestamp) revert OriginInTheFuture();\\n\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / _ONE_E18;\\n        _expTable2 = (_expTable1 * _expTable1) / _ONE_E18;\\n        _expTable3 = (_expTable2 * _expTable2) / _ONE_E18;\\n        _expTable4 = (_expTable3 * _expTable3) / _ONE_E18;\\n        _expTable5 = (_expTable4 * _expTable4) / _ONE_E18;\\n        _expTable6 = (_expTable5 * _expTable5) / _ONE_E18;\\n        _expTable7 = (_expTable6 * _expTable6) / _ONE_E18;\\n        _expTable8 = (_expTable7 * _expTable7) / _ONE_E18;\\n        _expTable9 = (_expTable8 * _expTable8) / _ONE_E18;\\n        _expTable10 = (_expTable9 * _expTable9) / _ONE_E18;\\n        _expTable11 = (_expTable10 * _expTable10) / _ONE_E18;\\n        _expTable12 = (_expTable11 * _expTable11) / _ONE_E18;\\n        _expTable13 = (_expTable12 * _expTable12) / _ONE_E18;\\n        _expTable14 = (_expTable13 * _expTable13) / _ONE_E18;\\n        _expTable15 = (_expTable14 * _expTable14) / _ONE_E18;\\n        _expTable16 = (_expTable15 * _expTable15) / _ONE_E18;\\n        _expTable17 = (_expTable16 * _expTable16) / _ONE_E18;\\n        _expTable18 = (_expTable17 * _expTable17) / _ONE_E18;\\n        _expTable19 = (_expTable18 * _expTable18) / _ONE_E18;\\n        _expTable20 = (_expTable19 * _expTable19) / _ONE_E18;\\n        _expTable21 = (_expTable20 * _expTable20) / _ONE_E18;\\n        _expTable22 = (_expTable21 * _expTable21) / _ONE_E18;\\n        _expTable23 = (_expTable22 * _expTable22) / _ONE_E18;\\n        _expTable24 = (_expTable23 * _expTable23) / _ONE_E18;\\n        _expTable25 = (_expTable24 * _expTable24) / _ONE_E18;\\n        _expTable26 = (_expTable25 * _expTable25) / _ONE_E18;\\n        _expTable27 = (_expTable26 * _expTable26) / _ONE_E18;\\n        _expTable28 = (_expTable27 * _expTable27) / _ONE_E18;\\n        _expTable29 = (_expTable28 * _expTable28) / _ONE_E18;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / _ONE_E18;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / _ONE_E18;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / _ONE_E18;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / _ONE_E18;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / _ONE_E18;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / _ONE_E18;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / _ONE_E18;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / _ONE_E18;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / _ONE_E18;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / _ONE_E18;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / _ONE_E18;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / _ONE_E18;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / _ONE_E18;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / _ONE_E18;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / _ONE_E18;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / _ONE_E18;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / _ONE_E18;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / _ONE_E18;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / _ONE_E18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / _ONE_E18;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / _ONE_E18;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / _ONE_E18;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / _ONE_E18;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / _ONE_E18;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / _ONE_E18;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / _ONE_E18;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / _ONE_E18;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / _ONE_E18;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / _ONE_E18;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / _ONE_E18;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * _ONE_E18) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x6070efb4305d8a7c6402b886fe6e6d2875f94ad19b695cdba611f8b7aae79b03\",\"license\":\"MIT\"},\"contracts/interfaces/ISt1inch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISt1inch {\\n    function expBase() external view returns (uint256);\\n    function origin() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5530e3d1de685f263c8be8b48c75a23392f4f6af13dc92bdae69b44eeb505104\",\"license\":\"MIT\"},\"contracts/interfaces/IStepVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IStepVesting {\\n    function receiver() external view returns (address);\\n    function claim() external;\\n    function started() external view returns (uint256);\\n    function cliffDuration() external view returns (uint256);\\n    function cliffAmount() external view returns (uint256);\\n    function stepDuration() external view returns (uint256);\\n    function stepAmount() external view returns (uint256);\\n    function numOfSteps() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x45bfaa2b63d2df21777c001e7fb1392d2f6a5817f9249cded62833a9ec91bf96\",\"license\":\"MIT\"},\"contracts/interfaces/IVestedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n\\ninterface IVestedToken {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function owner() external view returns (address);\\n    function transferOwnership(address newOwner) external;\\n    function registerVestings(address[] calldata vestings) external;\\n    function deregisterVestings(address[] calldata vestings) external;\\n}\\n\",\"keccak256\":\"0x17b251044bff83eb36a439392d3098868d9fd2bd2627b724aab3b3ba422da8c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104a08060405234620005ee576040816200297e8038038091620000248285620005f3565b833981010312620005ee578051906001600160a01b03908183168303620005ee5760208091015191808316809303620005ee57604051632f2a70ff60e21b8152928284600481845afa938415620005ad57600094620005b9575b5082600491604051928380926349c5af9960e11b82525afa928315620005ad5760009362000573575b50506000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3428211620005645750670de0b6b3a76400006200030181620002f481620002e781620002da81620002cd81620002c081620002b3819f6200030e9f8362000299816200028c816200027f816200027281620002658162000258816200024b819f620002a69f836200023181620002248162000217816200020a81620001fd81620001f081620001e3819f6200023e9f83620001c981620001bc81620001af81620001a38199620001d6996080528060a0528060c052806200062d565b048060e052806200062d565b048061010052806200062d565b048061012052806200062d565b048061014052806200062d565b048061016052806200062d565b048061018052806200062d565b04806101a052806200062d565b04806101c052806200062d565b04806101e052806200062d565b048061020052806200062d565b048061022052806200062d565b048061024052806200062d565b048061026052806200062d565b048061028052806200062d565b04806102a052806200062d565b04806102c052806200062d565b04806102e052806200062d565b048061030052806200062d565b048061032052806200062d565b048061034052806200062d565b048061036052806200062d565b048061038052806200062d565b04806103a052806200062d565b04806103c052806200062d565b04806103e052806200062d565b048061040052806200062d565b048061042052806200062d565b048061044052806200062d565b0461046052610480526040516123266200065882396080518181816108b6015281816112eb0152611a77015260a0518161085d015260c051818181611a4701526122be015260e051818181611a1201526122810152610100518181816119de01526122450152610120518181816119aa015261220901526101405181818161197601526121cd015261016051818181611942015261219101526101805181818161190e015261215501526101a0518181816118da015261211901526101c0518181816118a601526120dd01526101e05181818161187201526120a101526102005181818161183e015261206501526102205181818161180a01526120290152610240518181816117d60152611fed0152610260518181816117a20152611fb101526102805181818161176e0152611f7501526102a05181818161173a0152611f3901526102c0518181816117060152611efd01526102e0518181816116d20152611ec101526103005181818161169e0152611e8501526103205181818161166a0152611e490152610340518181816116360152611e0d0152610360518181816116020152611dd10152610380518181816115ce0152611d9501526103a05181818161159a0152611d5901526103c0518181816115660152611d1d01526103e0518181816115320152611ce10152610400518181816114fe0152611ca50152610420518181816114ca0152611c690152610440518181816114940152611c2b01526104605181818161145e0152611bed01526104805181818161020701528181610aec01528181610b410152610d7d015261232690f35b635a59719b60e01b8152600490fd5b8181949293943d8311620005a5575b6200058e8183620005f3565b81010312620005a2575051903880620000a7565b80fd5b503d62000582565b6040513d6000823e3d90fd5b90938382813d8311620005e6575b620005d38183620005f3565b81010312620005a257505192826200007e565b503d620005c7565b600080fd5b601f909101601f19168101906001600160401b038211908210176200061757604052565b634e487b7160e01b600052604160045260246000fd5b818102929181159184041417156200064157565b634e487b7160e01b600052601160045260246000fdfe604060c081526004908136101561001557600080fd5b600091823560e01c80630c911b6e14610d225780634ca66f1a14610b105780635de2974114610aa1578063641e5d1f146109ca578063715018a61461092a5780638da5cb5b146108d9578063938b5f3214610880578063bca9c3fc14610827578063bcc3f3bd14610423578063d9165e19146101d65763f2fde38b1461009a57600080fd5b346101d25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d2576100d1610e03565b906100da610e91565b73ffffffffffffffffffffffffffffffffffffffff80921692831561014f575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50346101d2576101e536610e26565b90926101ef610e91565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa9081156104195783916103fc575b5084163014610384575b505b81811061027e578780f35b8261029261028d83858b61109d565b6110ad565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561037a576102e4929186918c9161034d575b50168a5260018752858a206110ce565b156102f157600101610273565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f56657374696e6720697320616c726561647920726567697374657265640000006044820152fd5b61036d9150893d8b11610373575b6103658183610f53565b810190611014565b386102d4565b503d61035b565b86513d8c823e3d90fd5b803b156103f85781836103c7928a838b8a51968795869485937fd9165e190000000000000000000000000000000000000000000000000000000085528401611040565b03925af180156103ee5715610271576103df90610f10565b6103ea578638610271565b8680fd5b85513d84823e3d90fd5b5080fd5b6104139150873d8911610373576103658183610f53565b38610267565b86513d85823e3d90fd5b50346101d257608060a052602060a0515260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d257610466610e03565b8373ffffffffffffffffffffffffffffffffffffffff8092168152600160a051515283812091825492825b8481106104a457865188815260a0515190f35b826104af8284610fcd565b90549060031b1c1687517f1f2698ab00000000000000000000000000000000000000000000000000000000815260a05151818981855afa90811561081d5786916107e9575b508851907fd85349f700000000000000000000000000000000000000000000000000000000825260a05151828a81865afa9182156107df5787926107a9575b508951917f4a4e577600000000000000000000000000000000000000000000000000000000835260a05151838b81875afa92831561079f578893610769575b5080820142106106d5575b8a51927f5d1fbf5400000000000000000000000000000000000000000000000000000000845260a05151848c81885afa9384156106cb578994610695575b50885b8481106105d357505050505050600101610491565b600181018202838501018042106105ee575b506001016105be565b909d8d517f1989488b0000000000000000000000000000000000000000000000000000000081528d8160a0515191818b5afa90811561068a578c91610650575b50610648906106436001946014429304611a74565b6112e8565b019d906105e5565b905060a051513d8111610683575b6106688183610f53565b8160a05151918101031261067e5751600161062e565b600080fd5b503d61065e565b508e513d8d823e3d90fd5b90935060a051513d81116106c4575b6106ae8183610f53565b8160a05151918101031261067e575192386105bb565b503d6106a4565b8c513d8b823e3d90fd5b9a8a517f460ad43900000000000000000000000000000000000000000000000000000000815260a05151818c81885afa9081156106cb578d908a92610731575b5061064361072a926014429387019104611a74565b019a61057d565b91505060a051513d8111610762575b61074a8183610f53565b8160a05151918101031261067e57518c610643610715565b503d610740565b90925060a051513d8111610798575b6107828183610f53565b8160a05151918101031261067e57519138610572565b503d610778565b8b513d8a823e3d90fd5b90915060a051513d81116107d8575b6107c28183610f53565b8160a05151918101031261067e57519038610533565b503d6107b8565b8a513d89823e3d90fd5b905060a051513d8111610816575b6108018183610f53565b8160a05151918101031261067e5751386104f4565b503d6107f7565b89513d88823e3d90fd5b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f857602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f857602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f85773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346109c757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109c757610961610e91565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346103f857602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109c75773ffffffffffffffffffffffffffffffffffffffff9081610a1c610e03565b16815260019182855283822094845191828288549182815201908198865283862090865b818110610a8e5750505083610a56910384610f53565b855195828701938388525180945286019693905b838210610a775786880387f35b845181168852968201969382019390850190610a6a565b8254845292850192918801918801610a40565b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f8576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101d257610b1f36610e26565b9092610b29610e91565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa908115610419578391610d05575b5084163014610c9f575b505b818110610bb8578780f35b82610bc761028d83858b61109d565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561037a57610c19929186918c91610c82575b50168a5260018752858a2061118f565b15610c2657600101610bad565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601960248201527f56657374696e67206973206e6f742072656769737465726564000000000000006044820152fd5b610c999150893d8b11610373576103658183610f53565b38610c09565b803b156103f8578183610ce2928a838b8a51968795869485937f4ca66f1a0000000000000000000000000000000000000000000000000000000085528401611040565b03925af180156103ee5715610bab57610cfa90610f10565b6103ea578638610bab565b610d1c9150873d8911610373576103658183610f53565b38610ba1565b5090346101d25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d25782610d5c610e03565b610d64610e91565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b15610dff5783602492865197889586947ff2fde38b00000000000000000000000000000000000000000000000000000000865216908401525af1908115610df65750610dea575080f35b610df390610f10565b80f35b513d84823e3d90fd5b8380fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361067e57565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261067e5760043567ffffffffffffffff9283821161067e578060238301121561067e57816004013593841161067e5760248460051b8301011161067e576024019190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610eb257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610f2457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610f2457604052565b8115610f9e570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8054821015610fe55760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261067e575173ffffffffffffffffffffffffffffffffffffffff8116810361067e5790565b9091604060209282848201858352520192916000805b83821061106557505050505090565b9091929394853573ffffffffffffffffffffffffffffffffffffffff81168091036101d2578152830194830193929160010190611056565b9190811015610fe55760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361067e5790565b91906001830160009082825280602052604082205415600014611189578454946801000000000000000086101561115c578361114c611117886001604098999a01855584610fcd565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146112e1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff918281018181116112b45782549084820191821161128757808203611252575b50505080548015611225578201916112088383610fcd565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b6112726112626111179386610fcd565b90549060031b1c92839286610fcd565b905586528460205260408620553880806111f0565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b907f00000000000000000000000000000000000000000000000000000000000000009081811015611a6f5750805b038160018216611a39575b5060028116611a05575b600481166119d1575b6008811661199d575b60108116611969575b60208116611935575b60408116611901575b608081166118cd575b6101008116611899575b6102008116611865575b6104008116611831575b61080081166117fd575b61100081166117c9575b6120008116611795575b6140008116611761575b618000811661172d575b6201000081166116f9575b6202000081166116c5575b620400008116611691575b62080000811661165d575b621000008116611629575b6220000081166115f5575b6240000081166115c1575b62800000811661158d575b63010000008116611559575b63020000008116611525575b630400000081166114f1575b630800000081166114bd575b63100000008116611482575b6320000000166114525790565b670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490565b90670de0b6b3a76400006320000000917f00000000000000000000000000000000000000000000000000000000000000000204919050611445565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611439565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061142d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611421565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611415565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611409565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113fe565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113f3565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113e8565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113dd565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113d2565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113c7565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113bc565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113b1565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113a7565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061139d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611393565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611389565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061137f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611375565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061136b565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611361565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611358565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061134f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611346565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061133d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611334565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061132b565b670de0b6b3a76400009192507f000000000000000000000000000000000000000000000000000000000000000002049038611321565b611316565b907f000000000000000000000000000000000000000000000000000000000000000090818110156122eb5750805b0381600182166122ad575b5060028116612271575b60048116612235575b600881166121f9575b601081166121bd575b60208116612181575b60408116612145575b60808116612109575b61010081166120cd575b6102008116612091575b6104008116612055575b6108008116612019575b6110008116611fdd575b6120008116611fa1575b6140008116611f65575b6180008116611f29575b620100008116611eed575b620200008116611eb1575b620400008116611e75575b620800008116611e39575b621000008116611dfd575b622000008116611dc1575b624000008116611d85575b628000008116611d49575b63010000008116611d0d575b63020000008116611cd1575b63040000008116611c95575b63080000008116611c59575b63100000008116611c16575b632000000016611bde5790565b611c1390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90565b90611c51632000000091670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b919050611bd1565b90611c8f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611bc5565b90611ccb90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611bb9565b90611d0790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611bad565b90611d4390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ba1565b90611d7f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b95565b90611dbb90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b8a565b90611df790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b7f565b90611e3390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b74565b90611e6f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b69565b90611eab90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b5e565b90611ee790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b53565b90611f2390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b48565b90611f5f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b3d565b90611f9b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b33565b90611fd790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b29565b9061201390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b1f565b9061204f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b15565b9061208b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b0b565b906120c790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b01565b9061210390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611af7565b9061213f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611aed565b9061217b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ae4565b906121b790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611adb565b906121f390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ad2565b9061222f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ac9565b9061226b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ac0565b906122a790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ab7565b6122e4919250670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b9038611aad565b611aa256fea264697066735822122091bf5b0d4b0cce826b36b5f8762a2e8cf5f1edf4955e2c5a1100d995e486078b64736f6c63430008130033",
  "deployedBytecode": "0x604060c081526004908136101561001557600080fd5b600091823560e01c80630c911b6e14610d225780634ca66f1a14610b105780635de2974114610aa1578063641e5d1f146109ca578063715018a61461092a5780638da5cb5b146108d9578063938b5f3214610880578063bca9c3fc14610827578063bcc3f3bd14610423578063d9165e19146101d65763f2fde38b1461009a57600080fd5b346101d25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d2576100d1610e03565b906100da610e91565b73ffffffffffffffffffffffffffffffffffffffff80921692831561014f575050600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50346101d2576101e536610e26565b90926101ef610e91565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa9081156104195783916103fc575b5084163014610384575b505b81811061027e578780f35b8261029261028d83858b61109d565b6110ad565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561037a576102e4929186918c9161034d575b50168a5260018752858a206110ce565b156102f157600101610273565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f56657374696e6720697320616c726561647920726567697374657265640000006044820152fd5b61036d9150893d8b11610373575b6103658183610f53565b810190611014565b386102d4565b503d61035b565b86513d8c823e3d90fd5b803b156103f85781836103c7928a838b8a51968795869485937fd9165e190000000000000000000000000000000000000000000000000000000085528401611040565b03925af180156103ee5715610271576103df90610f10565b6103ea578638610271565b8680fd5b85513d84823e3d90fd5b5080fd5b6104139150873d8911610373576103658183610f53565b38610267565b86513d85823e3d90fd5b50346101d257608060a052602060a0515260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d257610466610e03565b8373ffffffffffffffffffffffffffffffffffffffff8092168152600160a051515283812091825492825b8481106104a457865188815260a0515190f35b826104af8284610fcd565b90549060031b1c1687517f1f2698ab00000000000000000000000000000000000000000000000000000000815260a05151818981855afa90811561081d5786916107e9575b508851907fd85349f700000000000000000000000000000000000000000000000000000000825260a05151828a81865afa9182156107df5787926107a9575b508951917f4a4e577600000000000000000000000000000000000000000000000000000000835260a05151838b81875afa92831561079f578893610769575b5080820142106106d5575b8a51927f5d1fbf5400000000000000000000000000000000000000000000000000000000845260a05151848c81885afa9384156106cb578994610695575b50885b8481106105d357505050505050600101610491565b600181018202838501018042106105ee575b506001016105be565b909d8d517f1989488b0000000000000000000000000000000000000000000000000000000081528d8160a0515191818b5afa90811561068a578c91610650575b50610648906106436001946014429304611a74565b6112e8565b019d906105e5565b905060a051513d8111610683575b6106688183610f53565b8160a05151918101031261067e5751600161062e565b600080fd5b503d61065e565b508e513d8d823e3d90fd5b90935060a051513d81116106c4575b6106ae8183610f53565b8160a05151918101031261067e575192386105bb565b503d6106a4565b8c513d8b823e3d90fd5b9a8a517f460ad43900000000000000000000000000000000000000000000000000000000815260a05151818c81885afa9081156106cb578d908a92610731575b5061064361072a926014429387019104611a74565b019a61057d565b91505060a051513d8111610762575b61074a8183610f53565b8160a05151918101031261067e57518c610643610715565b503d610740565b90925060a051513d8111610798575b6107828183610f53565b8160a05151918101031261067e57519138610572565b503d610778565b8b513d8a823e3d90fd5b90915060a051513d81116107d8575b6107c28183610f53565b8160a05151918101031261067e57519038610533565b503d6107b8565b8a513d89823e3d90fd5b905060a051513d8111610816575b6108018183610f53565b8160a05151918101031261067e5751386104f4565b503d6107f7565b89513d88823e3d90fd5b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f857602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f857602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f85773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346109c757807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109c757610961610e91565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346103f857602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109c75773ffffffffffffffffffffffffffffffffffffffff9081610a1c610e03565b16815260019182855283822094845191828288549182815201908198865283862090865b818110610a8e5750505083610a56910384610f53565b855195828701938388525180945286019693905b838210610a775786880387f35b845181168852968201969382019390850190610a6a565b8254845292850192918801918801610a40565b5050346103f857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103f8576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101d257610b1f36610e26565b9092610b29610e91565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692868351947f8da5cb5b00000000000000000000000000000000000000000000000000000000865260209586818981855afa908115610419578391610d05575b5084163014610c9f575b505b818110610bb8578780f35b82610bc761028d83858b61109d565b1684517ff7260d3e00000000000000000000000000000000000000000000000000000000815286818981855afa90811561037a57610c19929186918c91610c82575b50168a5260018752858a2061118f565b15610c2657600101610bad565b606486868651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601960248201527f56657374696e67206973206e6f742072656769737465726564000000000000006044820152fd5b610c999150893d8b11610373576103658183610f53565b38610c09565b803b156103f8578183610ce2928a838b8a51968795869485937f4ca66f1a0000000000000000000000000000000000000000000000000000000085528401611040565b03925af180156103ee5715610bab57610cfa90610f10565b6103ea578638610bab565b610d1c9150873d8911610373576103658183610f53565b38610ba1565b5090346101d25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101d25782610d5c610e03565b610d64610e91565b73ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b15610dff5783602492865197889586947ff2fde38b00000000000000000000000000000000000000000000000000000000865216908401525af1908115610df65750610dea575080f35b610df390610f10565b80f35b513d84823e3d90fd5b8380fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361067e57565b9060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261067e5760043567ffffffffffffffff9283821161067e578060238301121561067e57816004013593841161067e5760248460051b8301011161067e576024019190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610eb257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff8111610f2457604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610f2457604052565b8115610f9e570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8054821015610fe55760005260206000200190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9081602091031261067e575173ffffffffffffffffffffffffffffffffffffffff8116810361067e5790565b9091604060209282848201858352520192916000805b83821061106557505050505090565b9091929394853573ffffffffffffffffffffffffffffffffffffffff81168091036101d2578152830194830193929160010190611056565b9190811015610fe55760051b0190565b3573ffffffffffffffffffffffffffffffffffffffff8116810361067e5790565b91906001830160009082825280602052604082205415600014611189578454946801000000000000000086101561115c578361114c611117886001604098999a01855584610fcd565b81939154907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060031b92831b921b19161790565b9055549382526020522055600190565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146112e1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff918281018181116112b45782549084820191821161128757808203611252575b50505080548015611225578201916112088383610fcd565b909182549160031b1b191690555582526020526040812055600190565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526031600452fd5b6112726112626111179386610fcd565b90549060031b1c92839286610fcd565b905586528460205260408620553880806111f0565b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505090565b907f00000000000000000000000000000000000000000000000000000000000000009081811015611a6f5750805b038160018216611a39575b5060028116611a05575b600481166119d1575b6008811661199d575b60108116611969575b60208116611935575b60408116611901575b608081166118cd575b6101008116611899575b6102008116611865575b6104008116611831575b61080081166117fd575b61100081166117c9575b6120008116611795575b6140008116611761575b618000811661172d575b6201000081166116f9575b6202000081166116c5575b620400008116611691575b62080000811661165d575b621000008116611629575b6220000081166115f5575b6240000081166115c1575b62800000811661158d575b63010000008116611559575b63020000008116611525575b630400000081166114f1575b630800000081166114bd575b63100000008116611482575b6320000000166114525790565b670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490565b90670de0b6b3a76400006320000000917f00000000000000000000000000000000000000000000000000000000000000000204919050611445565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611439565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061142d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611421565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611415565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611409565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113fe565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113f3565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113e8565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113dd565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113d2565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113c7565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113bc565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113b1565b90670de0b6b3a7640000907f00000000000000000000000000000000000000000000000000000000000000000204906113a7565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061139d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611393565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611389565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061137f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611375565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061136b565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611361565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611358565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061134f565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611346565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061133d565b90670de0b6b3a7640000907f0000000000000000000000000000000000000000000000000000000000000000020490611334565b90670de0b6b3a7640000907f000000000000000000000000000000000000000000000000000000000000000002049061132b565b670de0b6b3a76400009192507f000000000000000000000000000000000000000000000000000000000000000002049038611321565b611316565b907f000000000000000000000000000000000000000000000000000000000000000090818110156122eb5750805b0381600182166122ad575b5060028116612271575b60048116612235575b600881166121f9575b601081166121bd575b60208116612181575b60408116612145575b60808116612109575b61010081166120cd575b6102008116612091575b6104008116612055575b6108008116612019575b6110008116611fdd575b6120008116611fa1575b6140008116611f65575b6180008116611f29575b620100008116611eed575b620200008116611eb1575b620400008116611e75575b620800008116611e39575b621000008116611dfd575b622000008116611dc1575b624000008116611d85575b628000008116611d49575b63010000008116611d0d575b63020000008116611cd1575b63040000008116611c95575b63080000008116611c59575b63100000008116611c16575b632000000016611bde5790565b611c1390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90565b90611c51632000000091670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b919050611bd1565b90611c8f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611bc5565b90611ccb90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611bb9565b90611d0790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611bad565b90611d4390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ba1565b90611d7f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b95565b90611dbb90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b8a565b90611df790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b7f565b90611e3390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b74565b90611e6f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b69565b90611eab90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b5e565b90611ee790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b53565b90611f2390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b48565b90611f5f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b3d565b90611f9b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b33565b90611fd790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b29565b9061201390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b1f565b9061204f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b15565b9061208b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b0b565b906120c790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611b01565b9061210390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611af7565b9061213f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611aed565b9061217b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ae4565b906121b790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611adb565b906121f390670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ad2565b9061222f90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ac9565b9061226b90670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ac0565b906122a790670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b90611ab7565b6122e4919250670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000009102610f94565b9038611aad565b611aa256fea264697066735822122091bf5b0d4b0cce826b36b5f8762a2e8cf5f1edf4955e2c5a1100d995e486078b64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1360,
        "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
        "label": "_vestingsByReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AddressSet)538_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)538_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)538_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)538_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 537,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)223_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)223_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 218,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 222,
            "contract": "contracts/VestedVotingPower.sol:VestedVotingPower",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}