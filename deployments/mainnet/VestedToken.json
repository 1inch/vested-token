{
  "address": "0x03d1B1A56708FA298198DD5e23651a29B76a16d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_inchToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "VestingDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vesting",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "VestingRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "deregisterVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inchToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "registerVestings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateAllBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vestings",
          "type": "address[]"
        }
      ],
      "name": "updateBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa29a11a32d691abf5fdefa3a64b1b4123f9ae71c34be29f9d4a4b99a939c57b",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x03d1B1A56708FA298198DD5e23651a29B76a16d2",
    "transactionIndex": 36,
    "gasUsed": "1253901",
    "logsBloom": "0x
    "blockHash": "0xf34ca11466f6f1496fec468a7668cb63a74471c469297a7fbaa96b9e56c81ad1",
    "transactionHash": "0xaa29a11a32d691abf5fdefa3a64b1b4123f9ae71c34be29f9d4a4b99a939c57b",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 13396454,
        "transactionHash": "0xaa29a11a32d691abf5fdefa3a64b1b4123f9ae71c34be29f9d4a4b99a939c57b",
        "address": "0x03d1B1A56708FA298198DD5e23651a29B76a16d2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011799622f4d98a24514011e8527b969f7488ef47"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0xf34ca11466f6f1496fec468a7668cb63a74471c469297a7fbaa96b9e56c81ad1"
      }
    ],
    "blockNumber": 13396454,
    "cumulativeGasUsed": "3840152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x111111111117dc0aa78b770fa6a738034120c302"
  ],
  "solcInputHash": "8d678acbbf9f8d14c2df6ec905136e80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_inchToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"VestingDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"VestingRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"deregisterVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inchToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"registerVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAllBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vestings\",\"type\":\"address[]\"}],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestedToken.sol\":\"VestedToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/VestedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IStepVesting.sol\\\";\\n\\ncontract VestedToken is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event VestingRegistered(address indexed vesting, address indexed receiver);\\n    event VestingDeregistered(address indexed vesting, address indexed receiver);\\n\\n    IERC20 public immutable inchToken;\\n    mapping (address => EnumerableSet.AddressSet) private _vestingsByReceiver;\\n    EnumerableSet.AddressSet private _receivers;\\n    mapping(address => uint256) private _vestingBalances;\\n\\n    constructor(IERC20 _inchToken) {\\n        inchToken = _inchToken;\\n    }\\n\\n    function name() external pure returns(string memory) {\\n        return \\\"1INCH Token (Vested)\\\";\\n    }\\n\\n    function symbol() external pure returns(string memory) {\\n        return \\\"v1INCH\\\";\\n    }\\n\\n    function decimals() external pure returns(uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        uint256 len = _receivers.length();\\n        uint256 _totalSupply;\\n        for (uint256 i = 0; i < len; i++) {\\n            _totalSupply += balanceOf(_receivers.at(i));\\n        }\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        EnumerableSet.AddressSet storage vestings = _vestingsByReceiver[account];\\n        uint256 len = vestings.length();\\n        uint256 balance;\\n        for (uint256 i = 0; i < len; i++) {\\n            balance += inchToken.balanceOf(vestings.at(i));\\n        }\\n        return balance;\\n    }\\n\\n    function registerVestings(address[] calldata vestings) external onlyOwner {\\n        uint256 len = vestings.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address vesting = vestings[i];\\n            address receiver = IStepVesting(vesting).receiver();\\n            require(_vestingsByReceiver[receiver].add(vesting), \\\"Vesting is already registered\\\");\\n            _receivers.add(receiver);\\n            emit VestingRegistered(vesting, receiver);\\n            uint256 actualBalance = inchToken.balanceOf(vesting);\\n            require(actualBalance > 0, \\\"Vesting is empty\\\");\\n            _vestingBalances[vesting] = actualBalance;\\n            emit Transfer(address(0), receiver, actualBalance);\\n        }\\n    }\\n\\n    function deregisterVestings(address[] calldata vestings) external onlyOwner {\\n        uint256 len = vestings.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address vesting = vestings[i];\\n            address receiver = IStepVesting(vesting).receiver();\\n            EnumerableSet.AddressSet storage receiverVestings = _vestingsByReceiver[receiver];\\n            require(receiverVestings.remove(vesting), \\\"Vesting is not registered\\\");\\n            if (receiverVestings.length() == 0) {\\n                require(_receivers.remove(receiver), \\\"Receiver is already removed\\\");\\n            }\\n            emit VestingDeregistered(vesting, receiver);\\n            uint256 storedBalance = _vestingBalances[vesting];\\n            if (storedBalance > 0) {\\n                emit Transfer(receiver, address(0), storedBalance);\\n                _vestingBalances[vesting] = 0;\\n            }\\n        }\\n    }\\n\\n    function updateAllBalances() external {\\n        address[] memory receivers = _receivers.values();\\n        uint256 len = receivers.length;\\n        for(uint256 i = 0; i < len; i++) {\\n            updateBalances(_vestingsByReceiver[receivers[i]].values());\\n        }\\n    }\\n\\n    function updateBalances(address[] memory vestings) public {\\n        uint256 len = vestings.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address vesting = vestings[i];\\n            address receiver = IStepVesting(vesting).receiver();\\n            uint256 actualBalance = inchToken.balanceOf(vesting);\\n            uint256 storedBalance = _vestingBalances[vesting];\\n            if (actualBalance < storedBalance) {\\n                _vestingBalances[vesting] = actualBalance;\\n                unchecked {\\n                    emit Transfer(receiver, address(0), storedBalance - actualBalance);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefb866fdf1e5cbe4b940872e93eb5cdb815bc7594d3279095a6cc55bd7ca4fdb\",\"license\":\"MIT\"},\"contracts/interfaces/IStepVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStepVesting {\\n    function receiver() external returns (address);\\n    function claim() external;\\n}\\n\",\"keccak256\":\"0xcb7f3c967b4739ee38b19c700c4d6bc459d92d2637b6da555cb85d306dff3590\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161162d38038061162d8339818101604052602081101561003357600080fd5b505161003e3361004f565b6001600160a01b031660805261009f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60805161155e6100cf600039600081816104090152818161087801528181610ac00152610e25015261155e6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063d9165e1911610066578063d9165e191461038c578063dfa811ba146103fc578063ec95459414610404578063f2fde38b1461042b57600080fd5b80638da5cb5b1461026d57806395d89b41146102b0578063ab42d066146102e957600080fd5b80634ca66f1a116100bd5780634ca66f1a146101c057806370a0823114610232578063715018a61461026557600080fd5b806306fdde03146100e457806318160ddd1461018e578063313ce567146101a8575b600080fd5b60408051808201909152601481527f31494e434820546f6b656e20285665737465642900000000000000000000000060208201525b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015357818101518382015260200161013b565b50505050905090810190601f1680156101805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019661045e565b60408051918252519081900360200190f35b60126040805160ff9092168252519081900360200190f35b610230600480360360208110156101d657600080fd5b8101906020810181356401000000008111156101f157600080fd5b82018360208201111561020357600080fd5b8035906020019184602083028401116401000000008311171561022557600080fd5b5090925090506104b1565b005b6101966004803603602081101561024857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610824565b610230610944565b60005473ffffffffffffffffffffffffffffffffffffffff165b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60408051808201909152600681527f7631494e434800000000000000000000000000000000000000000000000000006020820152610119565b610230600480360360208110156102ff57600080fd5b81019060208101813564010000000081111561031a57600080fd5b82018360208201111561032c57600080fd5b8035906020019184602083028401116401000000008311171561034e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506109d1945050505050565b610230600480360360208110156103a257600080fd5b8101906020810181356401000000008111156103bd57600080fd5b8201836020820111156103cf57600080fd5b803590602001918460208302840111640100000000831117156103f157600080fd5b509092509050610be8565b610230610fbc565b6102877f000000000000000000000000000000000000000000000000000000000000000081565b6102306004803603602081101561044157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611052565b60008061046b6002611182565b90506000805b828110156104aa5761048c610487600283611192565b610824565b6104969083611462565b9150806104a28161147a565b915050610471565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b8060005b8181101561081e576000848483818110610557576105576114b3565b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663f7260d3e6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050506040513d60208110156105ea57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902090915061061e81846111a5565b61068957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56657374696e67206973206e6f74207265676973746572656400000000000000604482015290519081900360640190fd5b61069281611182565b61070c576106a16002836111a5565b61070c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526563656976657220697320616c72656164792072656d6f7665640000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f1a26e420c4d7bb40a63989d96200210486b70a587c72b825f419b149d21c242060405160405180910390a373ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604090205480156108075760408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a373ffffffffffffffffffffffffffffffffffffffff84166000908152600460205260408120555b5050505080806108169061147a565b91505061053b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081208161085382611182565b90506000805b8281101561093b5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166370a082316108a78684611192565b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d602081101561091b57600080fd5b50516109279083611462565b9150806109338161147a565b915050610859565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052e565b6109cf60006111c7565b565b805160005b81811015610be35760008382815181106109f2576109f26114b3565b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663f7260d3e6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a4657600080fd5b505af1158015610a5a573d6000803e3d6000fd5b505050506040513d6020811015610a7057600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604090205490915080821015610bcc5773ffffffffffffffffffffffffffffffffffffffff808516600090815260046020908152604080832086905580518686038152905192938716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35b505050508080610bdb9061147a565b9150506109d6565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052e565b8060005b8181101561081e576000848483818110610c8957610c896114b3565b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663f7260d3e6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020909150610d50908361123c565b610dbb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657374696e6720697320616c72656164792072656769737465726564000000604482015290519081900360640190fd5b610dc660028261123c565b508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46d3b8641d93b1bcf2e209872b63bfae6cf81caf2100b6ea9cf03a942069dd2360405160405180910390a360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610eaa57600080fd5b505afa158015610ebe573d6000803e3d6000fd5b505050506040513d6020811015610ed457600080fd5b5051905080610f4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f56657374696e6720697320656d70747900000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832085905580518581529051938616937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050508080610fb49061147a565b915050610c6d565b6000610fc8600261125e565b805190915060005b81811015610be35761104061103b60016000868581518110610ff457610ff46114b3565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061125e565b6109d1565b8061104a8161147a565b915050610fd0565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052e565b73ffffffffffffffffffffffffffffffffffffffff8116611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161052e565b61117f816111c7565b50565b600061118c825490565b92915050565b600061119e838361126b565b9392505050565b600061119e8373ffffffffffffffffffffffffffffffffffffffff8416611295565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061119e8373ffffffffffffffffffffffffffffffffffffffff8416611388565b6060600061119e836113d7565b6000826000018281548110611282576112826114b3565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561137e5760006112b96001836114e2565b85549091506000906112cd906001906114e2565b90508181146113325760008660000182815481106112ed576112ed6114b3565b9060005260206000200154905080876000018481548110611310576113106114b3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611343576113436114f9565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061118c565b600091505061118c565b60008181526001830160205260408120546113cf5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561118c565b50600061118c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561142757602002820191906000526020600020905b815481526020019060010190808311611413575b50505050509050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561147557611475611433565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114ac576114ac611433565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000828210156114f4576114f4611433565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d352e0343330e178e92f2d052c5bebea2752417ca8b5ce6e91d2170c22f7af4364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063d9165e1911610066578063d9165e191461038c578063dfa811ba146103fc578063ec95459414610404578063f2fde38b1461042b57600080fd5b80638da5cb5b1461026d57806395d89b41146102b0578063ab42d066146102e957600080fd5b80634ca66f1a116100bd5780634ca66f1a146101c057806370a0823114610232578063715018a61461026557600080fd5b806306fdde03146100e457806318160ddd1461018e578063313ce567146101a8575b600080fd5b60408051808201909152601481527f31494e434820546f6b656e20285665737465642900000000000000000000000060208201525b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015357818101518382015260200161013b565b50505050905090810190601f1680156101805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019661045e565b60408051918252519081900360200190f35b60126040805160ff9092168252519081900360200190f35b610230600480360360208110156101d657600080fd5b8101906020810181356401000000008111156101f157600080fd5b82018360208201111561020357600080fd5b8035906020019184602083028401116401000000008311171561022557600080fd5b5090925090506104b1565b005b6101966004803603602081101561024857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610824565b610230610944565b60005473ffffffffffffffffffffffffffffffffffffffff165b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60408051808201909152600681527f7631494e434800000000000000000000000000000000000000000000000000006020820152610119565b610230600480360360208110156102ff57600080fd5b81019060208101813564010000000081111561031a57600080fd5b82018360208201111561032c57600080fd5b8035906020019184602083028401116401000000008311171561034e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506109d1945050505050565b610230600480360360208110156103a257600080fd5b8101906020810181356401000000008111156103bd57600080fd5b8201836020820111156103cf57600080fd5b803590602001918460208302840111640100000000831117156103f157600080fd5b509092509050610be8565b610230610fbc565b6102877f000000000000000000000000000000000000000000000000000000000000000081565b6102306004803603602081101561044157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611052565b60008061046b6002611182565b90506000805b828110156104aa5761048c610487600283611192565b610824565b6104969083611462565b9150806104a28161147a565b915050610471565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b8060005b8181101561081e576000848483818110610557576105576114b3565b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663f7260d3e6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050506040513d60208110156105ea57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902090915061061e81846111a5565b61068957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f56657374696e67206973206e6f74207265676973746572656400000000000000604482015290519081900360640190fd5b61069281611182565b61070c576106a16002836111a5565b61070c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f526563656976657220697320616c72656164792072656d6f7665640000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f1a26e420c4d7bb40a63989d96200210486b70a587c72b825f419b149d21c242060405160405180910390a373ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604090205480156108075760408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a373ffffffffffffffffffffffffffffffffffffffff84166000908152600460205260408120555b5050505080806108169061147a565b91505061053b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081208161085382611182565b90506000805b8281101561093b5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166370a082316108a78684611192565b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d602081101561091b57600080fd5b50516109279083611462565b9150806109338161147a565b915050610859565b50949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052e565b6109cf60006111c7565b565b805160005b81811015610be35760008382815181106109f2576109f26114b3565b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663f7260d3e6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a4657600080fd5b505af1158015610a5a573d6000803e3d6000fd5b505050506040513d6020811015610a7057600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d6020811015610b3357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff841660009081526004602052604090205490915080821015610bcc5773ffffffffffffffffffffffffffffffffffffffff808516600090815260046020908152604080832086905580518686038152905192938716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35b505050508080610bdb9061147a565b9150506109d6565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052e565b8060005b8181101561081e576000848483818110610c8957610c896114b3565b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663f7260d3e6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260409020909150610d50908361123c565b610dbb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657374696e6720697320616c72656164792072656769737465726564000000604482015290519081900360640190fd5b610dc660028261123c565b508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f46d3b8641d93b1bcf2e209872b63bfae6cf81caf2100b6ea9cf03a942069dd2360405160405180910390a360007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610eaa57600080fd5b505afa158015610ebe573d6000803e3d6000fd5b505050506040513d6020811015610ed457600080fd5b5051905080610f4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f56657374696e6720697320656d70747900000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832085905580518581529051938616937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35050508080610fb49061147a565b915050610c6d565b6000610fc8600261125e565b805190915060005b81811015610be35761104061103b60016000868581518110610ff457610ff46114b3565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061125e565b6109d1565b8061104a8161147a565b915050610fd0565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161052e565b73ffffffffffffffffffffffffffffffffffffffff8116611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161052e565b61117f816111c7565b50565b600061118c825490565b92915050565b600061119e838361126b565b9392505050565b600061119e8373ffffffffffffffffffffffffffffffffffffffff8416611295565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061119e8373ffffffffffffffffffffffffffffffffffffffff8416611388565b6060600061119e836113d7565b6000826000018281548110611282576112826114b3565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561137e5760006112b96001836114e2565b85549091506000906112cd906001906114e2565b90508181146113325760008660000182815481106112ed576112ed6114b3565b9060005260206000200154905080876000018481548110611310576113106114b3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611343576113436114f9565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061118c565b600091505061118c565b60008181526001830160205260408120546113cf5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561118c565b50600061118c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561142757602002820191906000526020600020905b815481526020019060010190808311611413575b50505050509050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561147557611475611433565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114ac576114ac611433565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000828210156114f4576114f4611433565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d352e0343330e178e92f2d052c5bebea2752417ca8b5ce6e91d2170c22f7af4364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VestedToken.sol:VestedToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 843,
        "contract": "contracts/VestedToken.sol:VestedToken",
        "label": "_vestingsByReceiver",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(AddressSet)515_storage)"
      },
      {
        "astId": 846,
        "contract": "contracts/VestedToken.sol:VestedToken",
        "label": "_receivers",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)515_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/VestedToken.sol:VestedToken",
        "label": "_vestingBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)515_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)515_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)515_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 514,
            "contract": "contracts/VestedToken.sol:VestedToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)214_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)214_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 209,
            "contract": "contracts/VestedToken.sol:VestedToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 213,
            "contract": "contracts/VestedToken.sol:VestedToken",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}